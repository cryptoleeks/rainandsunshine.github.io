<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.loveyx815.cn/"/>
  <updated>2020-02-04T08:15:00.379Z</updated>
  <id>http://blog.loveyx815.cn/</id>
  
  <author>
    <name>Yonggang Shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git命令大全</title>
    <link href="http://blog.loveyx815.cn/2020/04/19/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://blog.loveyx815.cn/2020/04/19/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2020-04-19T07:42:49.025Z</published>
    <updated>2020-02-04T08:15:00.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git命令大全"><a href="#Git命令大全" class="headerlink" title="Git命令大全"></a>Git命令大全</h1><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>配置 Git 的相关参数。</p><p>Git 一共有3个配置文件：</p><p>\1. 仓库级的配置文件：在仓库的 <code>.git/.gitconfig</code>，该配置文件只对所在的仓库有效。<br> \2. 全局配置文件：Mac 系统在 <code>~/.gitconfig</code>，Windows 系统在 <code>C:\Users\&lt;用户名&gt;\.gitconfig</code>。<br> \3. 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 <code>/usr/local/git</code>）的 <code>etc</code> 文件夹中的 <code>gitconfig</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--local <span class="params">| --global |</span> --system&gt; -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前生效的配置信息</span></span><br><span class="line">$ git config -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--local <span class="params">| --global |</span> --system&gt; -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加配置项</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--local <span class="params">| --global |</span> --system&gt; --add &lt;name&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取配置项</span></span><br><span class="line">$ git config &lt;--local <span class="params">| --global |</span> --system&gt; --get &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除配置项</span></span><br><span class="line">$ git config &lt;--local <span class="params">| --global |</span> --system&gt; --unset &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置提交记录中的用户信息</span></span><br><span class="line">$ git config --global user.name &lt;用户名&gt;</span><br><span class="line">$ git config --global user.email &lt;邮箱地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改Git缓存区的大小</span></span><br><span class="line"><span class="comment"># 如果提交的内容较大，默认缓存较小，提交会失败</span></span><br><span class="line"><span class="comment"># 缓存大小单位：B，例如：524288000（500MB）</span></span><br><span class="line">$ git config --global http.postBuffer &lt;缓存大小&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span></span><br><span class="line">$ git config --global color.ui <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置可以缓存密码，默认缓存时间15分钟</span></span><br><span class="line">$ git config --global credential.helper cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置密码的缓存时间</span></span><br><span class="line"><span class="comment"># 缓存时间单位：秒</span></span><br><span class="line">$ git config --global credential.helper <span class="string">'cache --timeout=&lt;缓存时间&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置长期存储密码</span></span><br><span class="line">$ git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>从远程仓库克隆一个版本库到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地仓库的目录</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 指定要克隆的分支，默认是master分支</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</span><br></pre></td></tr></table></figure><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看本地仓库的状态。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地仓库的状态</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以简短模式查看本地仓库的状态</span></span><br><span class="line"><span class="comment"># 会显示两列，第一列是文件的状态，第二列是对应的文件</span></span><br><span class="line"><span class="comment"># 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</span></span><br><span class="line">$ git status -s</span><br></pre></td></tr></table></figure><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>操作远程库。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出已经存在的远程仓库</span></span><br><span class="line">$ git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出远程仓库的详细信息，在别名后面列出URL地址</span></span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的别名</span></span><br><span class="line">$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定名称的远程仓库</span></span><br><span class="line">$ git remote remove &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的 URL 地址</span></span><br><span class="line">$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</span><br></pre></td></tr></table></figure><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>操作 Git 的分支命令。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地的所有分支，当前所在分支以 "*" 标出</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 "*" 标出</span></span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支，新的分支基于上一次提交建立</span></span><br><span class="line">$ git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分支名称</span></span><br><span class="line"><span class="comment"># 如果不指定原分支名称则为当前所在分支</span></span><br><span class="line">$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"><span class="comment"># 强制修改分支名称</span></span><br><span class="line">$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的本地分支</span></span><br><span class="line">$ git branch -d &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除指定的本地分支</span></span><br><span class="line">$ git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>检出命令，用于创建、切换分支等。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到已存在的指定分支</span></span><br><span class="line">$ git checkout &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，保留所有的提交记录</span></span><br><span class="line"><span class="comment"># 等同于 "git branch" 和 "git checkout" 两个命令合并</span></span><br><span class="line">$ git checkout -b &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，删除所有的提交记录</span></span><br><span class="line">$ git checkout --orphan &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span></span><br><span class="line">$ git checkout &lt;文件路径&gt;</span><br></pre></td></tr></table></figure><h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>把已经提交的记录合并到当前分支。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把已经提交的记录合并到当前分支</span></span><br><span class="line">$ git cherry-pick &lt;commit ID&gt;</span><br></pre></td></tr></table></figure><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 把指定的文件添加到暂存区中</span></span><br><span class="line">$ git <span class="keyword">add</span> &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 添加所有修改、已删除的文件到暂存区中</span></span><br><span class="line">$ git <span class="keyword">add</span> -u [&lt;文件路径&gt;]</span><br><span class="line">$ git <span class="keyword">add</span> --update [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class="line">$ git <span class="keyword">add</span> -A [&lt;文件路径&gt;]</span><br><span class="line">$ git <span class="keyword">add</span> --all [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class="line">$ git <span class="keyword">add</span> -i [&lt;文件路径&gt;]</span><br><span class="line">$ git <span class="keyword">add</span> --interactive [&lt;文件路径&gt;]</span><br></pre></td></tr></table></figure><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>将暂存区中的文件提交到本地仓库中。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span></span><br><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span></span><br><span class="line">$ git commit -m <span class="string">"&lt;提交的描述信息&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有修改、已删除的文件提交到本地仓库中</span></span><br><span class="line"><span class="comment"># 不包括未被版本库跟踪的文件，等同于先调用了 "git add -u"</span></span><br><span class="line">$ git commit -a -m <span class="string">"&lt;提交的描述信息&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改上次提交的描述信息</span></span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>从远程仓库获取最新的版本到本地的 tmp 分支上。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将远程仓库所有分支的最新版本全部取回到本地</span></span><br><span class="line">$ git fetch &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程仓库指定分支的最新版本取回到本地</span></span><br><span class="line">$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>合并分支。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把指定的分支合并到当前所在的分支下</span></span><br><span class="line">$ git merge &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>比较版本之间的差异。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较暂存区中的文件和上次提交时的差异</span></span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff --staged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较当前文件和上次提交时的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看从指定的版本之后改动的内容</span></span><br><span class="line">$ git diff &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个分支之间的差异</span></span><br><span class="line">$ git diff &lt;分支名称&gt; &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个分支分开后各自的改动内容</span></span><br><span class="line">$ git diff &lt;分支名称&gt;...&lt;分支名称&gt;</span><br></pre></td></tr></table></figure><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>从远程仓库获取最新版本并合并到本地。<br> 首先会执行 <code>git fetch</code>，然后执行 <code>git merge</code>，把获取的分支的 HEAD 合并到当前分支。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库获取最新版本。</span></span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>把本地仓库的提交推送到远程仓库。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地仓库的分支推送到远程仓库的指定分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;<span class="symbol">:&lt;</span>远程分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的远程仓库的分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; <span class="symbol">:&lt;</span>远程分支名&gt;</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>显示提交的记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印所有的提交记录</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印从第一次提交到指定的提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印指定数量的最新提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> -&lt;指定的数量&gt;</span><br></pre></td></tr></table></figure><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>还原提交记录。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置暂存区，但文件不受影响</span></span><br><span class="line"><span class="comment"># 相当于将用 "git add" 命令更新到暂存区的内容撤出暂存区，可以指定文件</span></span><br><span class="line"><span class="comment"># 没有指定 commit ID 则默认为当前 HEAD</span></span><br><span class="line">$ git reset [&lt;文件路径&gt;]</span><br><span class="line">$ git reset --mixed [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span></span><br><span class="line">$ git reset &lt;commit ID&gt;</span><br><span class="line">$ git reset --mixed &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span></span><br><span class="line"><span class="comment"># 相当于调用 "git reset --mixed" 命令后又做了一次 "git add"</span></span><br><span class="line">$ git reset --soft &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span></span><br><span class="line">$ git reset --hard &lt;commit ID&gt;</span><br></pre></td></tr></table></figure><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个新的提交来撤销某次提交</span></span><br><span class="line">$ git revert &lt;commit ID&gt;</span><br></pre></td></tr></table></figure><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>操作标签的命令。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印所有的标签</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录</span></span><br><span class="line">$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加带有描述信息的附注标签，可以指定之前的提交记录</span></span><br><span class="line">$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定的标签</span></span><br><span class="line">$ git checkout &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签的信息</span></span><br><span class="line">$ git show &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的标签</span></span><br><span class="line">$ git tag -d &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定的标签提交到远程仓库</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地所有的标签全部提交到远程仓库</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; –tags</span><br></pre></td></tr></table></figure><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>重命名文件或者文件夹。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重命名指定的文件或者文件夹</span></span><br><span class="line">$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;</span><br></pre></td></tr></table></figure><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>删除文件或者文件夹。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除跟踪指定的文件，并从本地仓库的文件夹中删除</span></span><br><span class="line">$ git rm &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除</span></span><br><span class="line">$ git rm -r &lt;文件夹路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件</span></span><br><span class="line">$ git rm --cached</span><br></pre></td></tr></table></figure><h2 id="Git操作场景示例"><a href="#Git操作场景示例" class="headerlink" title="Git操作场景示例"></a>Git操作场景示例</h2><h3 id="1-删除掉本地不存在的远程分支"><a href="#1-删除掉本地不存在的远程分支" class="headerlink" title="1. 删除掉本地不存在的远程分支"></a>1. 删除掉本地不存在的远程分支</h3><p>多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 <code>git branch --all</code> 依然会显示该远程分支，可使用下列的命令进行删除：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 pull 命令，添加 -p 参数</span></span><br><span class="line">$ git pull -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于下面的命令</span></span><br><span class="line">$ git fetch -p</span><br><span class="line">$ git fetch --prune origin</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git命令大全&quot;&gt;&lt;a href=&quot;#Git命令大全&quot; class=&quot;headerlink&quot; title=&quot;Git命令大全&quot;&gt;&lt;/a&gt;Git命令大全&lt;/h1&gt;&lt;h2 id=&quot;git-config&quot;&gt;&lt;a href=&quot;#git-config&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JVM复习</title>
    <link href="http://blog.loveyx815.cn/2020/04/19/JVM%E5%A4%8D%E4%B9%A0/"/>
    <id>http://blog.loveyx815.cn/2020/04/19/JVM%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-19T07:46:41.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM复习"><a href="#JVM复习" class="headerlink" title="JVM复习"></a>JVM复习</h1><blockquote><p>基于JDK1.7的研究</p></blockquote><h2 id="一、Java内存区域与内存溢出"><a href="#一、Java内存区域与内存溢出" class="headerlink" title="一、Java内存区域与内存溢出"></a>一、Java内存区域与内存溢出</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200226175738746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上图为jdk1.7的内存模型，下图借用下别人的1.8的图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200226175825299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><ul><li><p>程序计数器</p><p>指示当前线程所执行的字节码的行号，编译字节码执行的命令，进而程序才能一步步的执行下去。</p></li><li><p>Java虚拟机栈</p><p>线程私有，生命周期与线程相同。</p><p>每个方法在执行时会创建一个<strong>栈帧</strong>用于存储局部变量表、操作数栈、动态链接、方法出口等。方法从调用到执行完成的过程中，就饿对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p><strong>局部变量表：</strong>存放了编译期间各基本数据类型、对象引用和returnAddress类型。其所需要的内存空间在编译期间完成分配，所以在方法运行期间是不会改变局部变量表的大小。</p></li><li><p>本地方法栈</p><p>与虚拟机栈类似，不同的是本地方法栈是为jvm调用Native方法服务。</p></li><li><p>Java堆</p><p>线程共享，存放对象实例。堆可以存在在物理上不连续，只要逻辑上连续就行。（GC在后面讲）</p></li><li><p>方法区</p><p>线程共享，用于存储已被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</p></li><li><p>运行时常量池</p><p>方法区的一部分，存放Class文件在编译期间生产的各种字面常量和符号引用。Java中并非预置在Class文件中的常量池才会被放入常量池区。在运行期间也可以将新的常量放入该区域，如String类的intern()方法</p></li><li><p>直接内存</p><p>我理解的是为了方便JVM在Java堆和Native堆中来回复制数据设置的缓冲区。直接内存并不是JVM运行时数据区的一部分，这是一种基于通道和缓冲区的I/O方式。可以通过一个存储子啊Java堆中DirectByteBuffer对象作为这块内存的引用进行操作。</p></li></ul><h2 id="二、对象的创建"><a href="#二、对象的创建" class="headerlink" title="二、对象的创建"></a>二、对象的创建</h2><p>JVM接受到一个new的指令是，首先会去常量池中寻找该类的符号引用，然后检察这个符号引用代表的类是否已经加载、解析和初始化过。如果没有则先执行类加载过程。</p><ul><li><p>空间划分</p><p>通过类接在的检查后，JVM为该对象分配内存（内存大小在类加载完后就确定了）。若Java堆的空间是规整连续的采用的分配算法是“指针碰撞”，直接移动与对象大小相同的距离指针分配内存。否则采用“空闲列表”分配，对于堆空间非连续的，用一张空闲记录表记录当前空闲的内存块，在为对象分配内存的时候，从空闲表中找到合适的空间进行分配，同时更新空闲表。</p><p>内存分配完后，JVM将分配到内存的空间全都初始化为零，最后再执行<init>方法进行我们想要的初始化对象</p></li><li><p>对象的内存布局</p><p>在HotSpot虚拟机中，对象在内存中分为：对象头+实例数据+对齐填充。</p><p><strong>对象头</strong>：包含了两部分信息，一部分用于存储对象自身的运行时数据（哈希吗、GC年龄代、锁状态、线程持有的锁等）；另一部分是类型指针，即对象指向他的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。若对象是个数组，对象头中还需有一块用于记录数组长度的数据。</p><p><strong>实例数据</strong>：是对象真正存储的有效信息</p><p><strong>对齐填充</strong>：对象的大小必须是8的整数倍，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p></li></ul><h2 id="三、内存分配与回收"><a href="#三、内存分配与回收" class="headerlink" title="三、内存分配与回收"></a>三、内存分配与回收</h2><blockquote><p>大多数情况下，对象在新生代Eden区中分配，当Eden去没有足够的空间进行分配的时候虚拟机会进行MinorGC</p></blockquote><p>MinorGC：新生代GC，速度较快</p><p>FullGC/MajorGC：老年代GC，速度很慢</p><ul><li><p>大对象直接进入老年代</p><p>-XX:PretenureSizeThreshold  令大于这个设置的值得对象直接进入老年代 ，Serial、ParNew有效。避免在新生代不停地复制</p></li><li><p>存活久的对象将进入老年代</p><p>对象计数器：对象在Eden区出生并经过第一次MinorGC后任然存活，移动进入Survivor空间，且对象年龄设置为1。对象在survivor区中每熬过一次MinorGC，年龄+1。当年龄增加到阈值（默认15），就进入老年代。</p></li><li><p>动态对象年龄判定</p><p>当Survivor空间中相同年龄所有对象大小&gt;Survivor/2大小，年龄&gt;=该年龄的对象就可以直接进入老年代，无需等到年龄阈值</p></li><li><p>空间分配担保</p><p><strong>JDK 6 Update24之前：</strong></p><p>在MinorGC之前，JVM会检查老年代的最大连续可用空间是否大于新生代所有对象空间。</p><p><strong>大于</strong>：MinorGC是安全执行的</p><p><strong>否则</strong>：JVM会去查看HandlePromotionFailure设置值是否允许担保失败。</p><p>​    <strong>允许</strong>：检查老年代最大可用的连续空间是否大于历次晋升老年代对象的<strong>平均大小</strong></p><p>​            <strong>大于</strong>：尝试一次MinorGC</p><p>​            <strong>否则</strong>：进行FullGC</p><p>​    <strong>否则</strong>：进行FullGC</p><p><strong>JDK 6 Update24之后：</strong></p><p>只要老年代的连续空间大于新生代对象总大小或历次晋升的平均大小就会MinorGC，否则将进行FullGC</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM复习&quot;&gt;&lt;a href=&quot;#JVM复习&quot; class=&quot;headerlink&quot; title=&quot;JVM复习&quot;&gt;&lt;/a&gt;JVM复习&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;基于JDK1.7的研究&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、Java内
      
    
    </summary>
    
    
      <category term="Java开发总结" scheme="http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="JVM" scheme="http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/JVM/"/>
    
    
      <category term="JVM" scheme="http://blog.loveyx815.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java异常-受查与非受查</title>
    <link href="http://blog.loveyx815.cn/2020/04/19/Java%E5%BC%82%E5%B8%B8/"/>
    <id>http://blog.loveyx815.cn/2020/04/19/Java%E5%BC%82%E5%B8%B8/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-19T07:45:37.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java异常-受查与非受查"><a href="#Java异常-受查与非受查" class="headerlink" title="Java异常-受查与非受查"></a>Java异常-受查与非受查</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200419145601997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><blockquote><p>所有的异常都是由Throwable继承而来，下级分为Error和Exception</p></blockquote><ul><li><p><strong>Error</strong></p><p>Error表示Java运行时系统的内部错误和资源耗尽错误，不应该抛出该类型的错误，只能通知用户，尽力安全关闭程序。</p></li><li><p><strong>Exception</strong></p><p>该分支派生出RuntimeException和其他异常（如I/O错误之类）</p></li></ul><ol><li><strong>受查与非受查异常</strong></li></ol><ul><li><p><strong>非受查异常</strong></p><blockquote><p> 派生于Error或RuntimeException类的所有异常</p></blockquote></li><li><p><strong>受查异常</strong></p><blockquote><p>其他所有的异常称为受查异常</p></blockquote></li></ul><p>一个方法必须声明所有可能抛出的受查异常，非受查异常要么不可控制（Error），要么就应该避免（RuntimeException）。当方法没有声明所有可能发生的受查异常，编译器会发出一个错误消息。</p><ul><li><p><strong>try-catch</strong><br>除了常用的try-catch-finally之外，还有一种带资源的try语句</p><blockquote><p>若资源属于一个实现了AutoCloseable接口的类，该接口有个close方法 void close()  throws Exception;<br>整体的带资源的try语句可写成如下代码：</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(Resource res = ...)&#123;</span><br><span class="line">    <span class="keyword">do</span> something;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当try语句退出或者发生异常时，会自动调用res.close()，相当于调用了finally</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java异常-受查与非受查&quot;&gt;&lt;a href=&quot;#Java异常-受查与非受查&quot; class=&quot;headerlink&quot; title=&quot;Java异常-受查与非受查&quot;&gt;&lt;/a&gt;Java异常-受查与非受查&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
      
    
    </summary>
    
    
      <category term="Java开发总结" scheme="http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java开发总结" scheme="http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="异常处理" scheme="http://blog.loveyx815.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>开发工作日常总结</title>
    <link href="http://blog.loveyx815.cn/2020/04/19/%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93%EF%BC%88%E5%91%BD%E4%BB%A4%E3%80%81%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%89/"/>
    <id>http://blog.loveyx815.cn/2020/04/19/%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93%EF%BC%88%E5%91%BD%E4%BB%A4%E3%80%81%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%89/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-19T07:47:49.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发工作日常总结"><a href="#开发工作日常总结" class="headerlink" title="开发工作日常总结"></a>开发工作日常总结</h1><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><blockquote><p> IDEA快捷键</p></blockquote><table><thead><tr><th>key</th><th>description</th><th>note</th></tr></thead><tbody><tr><td>Ctrl + Shift + Enter</td><td>换行</td><td></td></tr><tr><td>Ctrl +X/Y</td><td>删除当前行</td><td>Ctrl +X本意为剪切，这里也可以子啊不选择中的状态下删除行</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><hr><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h2 id="MAVEN"><a href="#MAVEN" class="headerlink" title="MAVEN"></a>MAVEN</h2><p>打war包命令输入——-&gt;     mvn install -DskipTests 或 mvn install -Dmaven.test.skip=true</p><p>打jar包命令输入——-&gt;      mvn package -DskipTests 或 mvn package -Dmaven.test.skip=true </p><hr><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><ul><li><p>参数</p><table><thead><tr><th>参数命令</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>-Xms</td><td>最小堆内存</td><td></td></tr><tr><td>-Xmx</td><td>最大堆内存</td><td></td></tr><tr><td>-Xmn</td><td>新生代分配的内存</td><td></td></tr><tr><td>-XX:+PrintGCDetails</td><td>打印GC日志</td><td></td></tr><tr><td>-XX:SurvivorRatio=8</td><td>新生代的Eden和survivor比例8：1</td><td></td></tr><tr><td>-XX:PretenureSizeThreshold</td><td>令大于这个设置的值得对象直接进入老年代</td><td>Serial、ParNew有效</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><ul><li><p>jmap Java内存映像工具</p><blockquote><p> jmap -dump:[live,]fromat=b,file=path pid</p></blockquote><p>生成Java堆转储快照</p></li><li><p>jhat 堆转储快照分析工具</p><blockquote><p>jhat path</p></blockquote><p>分析dump文件，可以在浏览器查看分析结果（不推荐）</p></li><li><p>jstack Java堆栈跟踪工具</p><blockquote><p>jstack [option] pid</p></blockquote><p>option: -F -l -m,强制输出堆栈信息，显示关于锁的附加信息，显示native方法信息</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发工作日常总结&quot;&gt;&lt;a href=&quot;#开发工作日常总结&quot; class=&quot;headerlink&quot; title=&quot;开发工作日常总结&quot;&gt;&lt;/a&gt;开发工作日常总结&lt;/h1&gt;&lt;h2 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Java开发总结" scheme="http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java开发总结" scheme="http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="快捷键" scheme="http://blog.loveyx815.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="常用命令" scheme="http://blog.loveyx815.cn/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ消息队列-初识</title>
    <link href="http://blog.loveyx815.cn/2020/04/19/mq/RocketMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://blog.loveyx815.cn/2020/04/19/mq/RocketMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-19T07:49:10.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RocketMQ消息队列"><a href="#RocketMQ消息队列" class="headerlink" title="RocketMQ消息队列"></a>RocketMQ消息队列</h1><p>[TOC]</p><blockquote><p>简介：RocketMQ具有灵活的扩展性、海量消息堆积能力、支持顺序消息、支持多种消息过滤方式、支持事务消息、支持回溯消费。</p></blockquote><blockquote><p>四大核心组件：NameServer、Broker、Producer、Consumer，每个组件都可以部署成集群模式进行水平扩展。</p></blockquote><ul><li><p><strong>Producer</strong></p><p>生产者负责生产消息，Rocketmq提供了同步、异步、单向三种方式发送消息。</p></li><li><p><strong>Consumer</strong></p><p>消费者负责消费消息，从消息服务器拉取消息并将其输入用户应用程序。</p></li><li><p><strong>Broker</strong></p><p>消息服务器是消息存储中心，主要用于接收生产者的消息进行存储，消费者从这里获取消息。并且还存储与消息有关的元数据（包括用户组、消费进度偏移量、队列信息等）</p></li><li><p><strong>NameServer</strong></p><p>名称服务器用来保存Broker相关元信息并给生产者和消费者查找Broker信息。</p></li></ul><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><p>（1）</p><p><a href="http://rocketmq.apache.org" target="_blank" rel="noopener">从官网下载RocketMQ服务包</a> ,将其解压至服务器目录</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200130143231879.png" alt="1580280760569" title="">                </div>                <div class="image-caption">1580280760569</div>            </figure><p>，启动nameserver和broker服务（需要安装好JDK环境，没装的话先移步安装JDK）。</p><p>（2）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">后台启动nameserver</span></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure><p>观察启动目录下的nohup.out日志文件，是否启动成功！</p><p>这里我使用的是默认的配置环境进行启动，结果报错了，日志显示如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Using the DefNew young collector with the CMS collector is deprecated and will likely be removed in a future release</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and will likely be removed in a future release.</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error='Cannot allocate memory' (errno=12)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> There is insufficient memory <span class="keyword">for</span> the Java Runtime Environment to <span class="built_in">continue</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Native memory allocation (mmap) failed to map 2147483648 bytes <span class="keyword">for</span> committing reserved memory.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> An error report file with more information is saved as:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /home/rocketmq-all-4.6.0-bin-release/bin/hs_err_pid7597.log</span></span><br></pre></td></tr></table></figure><p>说是内存分配不足。</p><ul><li>解决方案：查看<strong>mqnamesrv</strong>脚本，最后运行了<strong>runserver.sh</strong>，所以我们修改<strong>runserver.sh</strong>这个脚本的运行空间，找到<strong>JAVA_OPT</strong>这一行，修改成</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx128m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span><br></pre></td></tr></table></figure><p>内存大小可根据实际情况设定。</p><p>（3）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">后台启动broker</span></span><br><span class="line">nohup sh bin/mqborker -n ip:9876 &amp;</span><br></pre></td></tr></table></figure><p>观察启动目录下的nohup.out日志文件，是否启动成功！</p><p>我这里日志显示内存不够失败，参考（2）中的解决方案，修改<strong>runbroker.sh</strong>的运行内存参数，再查看日志文件，启动成功！</p><h2 id="2-实现生产者和消费者"><a href="#2-实现生产者和消费者" class="headerlink" title="2.实现生产者和消费者"></a>2.实现生产者和消费者</h2><blockquote><p>这里采用推送型消费模式进行消息消费，需要在消费者启动的过程中注册一个消息监听器，监听订阅消息的获取。    </p></blockquote><p>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个消费者，帮你设置一个消费者组</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"shi_consumer_group"</span>);</span><br><span class="line">        <span class="comment">//指定nameserver 地址</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"ip:9876"</span>);</span><br><span class="line">        <span class="comment">//设置consumer第一次启动时从队列首或尾开始消费</span></span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">        <span class="comment">//订阅指定Topic下的所有消息</span></span><br><span class="line">        consumer.subscribe(<span class="string">"topic_example_java"</span>,<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//注册消息监听器</span></span><br><span class="line">        consumer.registerMessageListener(</span><br><span class="line">                <span class="keyword">new</span> MessageListenerConcurrently()&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">//默认list里只有一条消息，可以通过设置参数来批量接受消息</span></span><br><span class="line">                        <span class="keyword">if</span> (list != <span class="keyword">null</span>)&#123;</span><br><span class="line">                            <span class="keyword">for</span> (MessageExt ext:list)&#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    System.out.println(<span class="keyword">new</span> Date()+<span class="keyword">new</span> String(ext.getBody(),<span class="string">"UTF-8"</span>));</span><br><span class="line">                                &#125;<span class="keyword">catch</span> (UnsupportedEncodingException e)&#123;</span><br><span class="line">                                    e.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">"么有监听到消息。。。"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//消费者对象在使用之前必须要调用start方法初始化</span></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">" Consumer started..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, UnsupportedEncodingException, RemotingException, InterruptedException, MQBrokerException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个消息生产者，并设置一个消息生产组</span></span><br><span class="line">        DefaultMQProducer producer =<span class="keyword">new</span> DefaultMQProducer(<span class="string">"shi_producer_group"</span>);</span><br><span class="line">        <span class="comment">//指定nameSERVER地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"ip:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化producer，在整个生命周期中只需要初始化一次</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//创建一个消息对象，指定其主题、标签、消息内容</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message(</span><br><span class="line">                    <span class="string">"topic_example_java"</span>, <span class="comment">//消息主题</span></span><br><span class="line">                    <span class="string">"TagA"</span>,<span class="comment">//消息标签</span></span><br><span class="line">                    (<span class="string">"Hello Java demo rocketMQ"</span>+i).getBytes(RemotingHelper.DEFAULT_CHARSET)<span class="comment">//消息内容</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//发送消息并返回结果</span></span><br><span class="line">            SendResult  sendResult = producer.send(message);</span><br><span class="line">            System.out.printf(<span class="string">"%s%n"</span>,sendResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一旦生产者实例不再被使用，则将其关闭，包括清理资源、关闭网络连接等</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别启动消费者和生产者，生产者发布携带topic的消息，消费者去订阅该topic，通过监听，即可获取消息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200130143216762.png" alt="1580363958517" title="">                </div>                <div class="image-caption">1580363958517</div>            </figure><p>生产者生产的100条消息已经被消费了</p><p>通过rocketmq-console可视化界面可以看到消费信息已产生</p><blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200130143156761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="1580364346073" title="">                </div>                <div class="image-caption">1580364346073</div>            </figure></blockquote><blockquote><p>这里提下rocketmq-console是rocketmq官方开源的控制台项目，可以监测mq运行情况。可以通过<a href="https://github.com/apache/rocketmq-externals" target="_blank" rel="noopener">rocketmq官方的github</a>的release-rocketmq-console-1.0.0分支获取该源码。</p></blockquote><p>这里有个地方需要注意，很多资料上写的都是本机配置rocketmq，所以他们启动的都是localhost:9876这个broker，包括在代码中生产者、消费者制定nameserver地址也是localhost:9876。</p><p><strong>使用云服务器部署mq的或者想使用虚拟机ip的需要注意了：</strong></p><ol><li><p>如若启动了mqnamesrv和mqbroker这两个服务，先杀掉。然后修改rocketmq解压目录下conf/broker.conf，新增个<strong>brokerIP1=你的服务器公网ip</strong> 。</p><ol start="2"><li><p>启动mqnamesrv和mqbroker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动mqnamesrv</span></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash">启动mqbroker，-c可以自定义配置文件启动，这里使用上面修改conf/borker.conf</span></span><br><span class="line">nohup sh bin/mqbroker -n localhost:9876 -c conf/broker.conf</span><br></pre></td></tr></table></figure></li><li><p><strong>服务器防火墙放行9876和10911端口，云服务器设置安全组规则，同样放行9876和10911</strong>（画重点，血的教训）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200130143041727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="1580365573265" title="">                </div>                <div class="image-caption">1580365573265</div>            </figure></p><p>之前不知道为什么就设置了10909端口，后来消息可以生产但无法消费。一直以为自己的端口都放开了，弄了半天发现还是端口没放开。。。</p></li></ol></li></ol><h2 id="3-基于Aop托管的实现"><a href="#3-基于Aop托管的实现" class="headerlink" title="3.基于Aop托管的实现"></a>3.基于Aop托管的实现</h2><blockquote><p>把生产者和消费者的实例放入spring bean中，利用Aop进行管理，方便调用</p></blockquote><ol><li><p>新建生产者、消费者和监听器bean.</p><p>生产者bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/01/30 15:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: spring IoC实现生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String producerGroupName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nameServerAddr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultMQProducer producer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringProducer</span><span class="params">(String producerGroupName, String nameServerAddr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.producerGroupName = producerGroupName;</span><br><span class="line">        <span class="keyword">this</span>.nameServerAddr = nameServerAddr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始启动消息生产者服务。。。"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个消息生产者，并设置一个消息生产者组</span></span><br><span class="line">        producer = <span class="keyword">new</span> DefaultMQProducer(producerGroupName);</span><br><span class="line">        <span class="comment">//指定nameserver地址</span></span><br><span class="line">        producer.setNamesrvAddr(nameServerAddr);</span><br><span class="line">        producer.start();</span><br><span class="line">        logger.info(<span class="string">"消息生产者服务启动成功。"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description: 销毁对象</span></span><br><span class="line"><span class="comment"> * @Param: []</span></span><br><span class="line"><span class="comment"> * @Return: void</span></span><br><span class="line"><span class="comment"> * @Author: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * @Date: 2020/1/30/030 下午 4:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始关闭消息生产者服务。。"</span>);</span><br><span class="line">        producer.shutdown();</span><br><span class="line">        logger.info(<span class="string">"消息生产者服务已关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultMQProducer <span class="title">getProducer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> producer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/01/30 16:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCousumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger =LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String consumerGroupName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nameServerAddr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String topicName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultMQPushConsumer consumer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageListenerConcurrently messageListenerConcurrently;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringCousumer</span><span class="params">(String consumerGroupName,String nameServerAddr,String topicName,MessageListenerConcurrently messageListener)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.consumerGroupName=consumerGroupName;</span><br><span class="line">        <span class="keyword">this</span>.nameServerAddr=nameServerAddr;</span><br><span class="line">        <span class="keyword">this</span>.topicName=topicName;</span><br><span class="line">        <span class="keyword">this</span>.messageListenerConcurrently=messageListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始启动消费者服务。。"</span>);</span><br><span class="line">        consumer=<span class="keyword">new</span> DefaultMQPushConsumer(consumerGroupName);</span><br><span class="line">        consumer.setNamesrvAddr(nameServerAddr);</span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">        consumer.subscribe(topicName,<span class="string">"*"</span>);</span><br><span class="line">        consumer.registerMessageListener(messageListenerConcurrently);</span><br><span class="line">        consumer.start();</span><br><span class="line">        logger.info(<span class="string">"消费者服务已启动。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始关闭消息者服务。。。"</span>);</span><br><span class="line">        consumer.shutdown();</span><br><span class="line">        logger.info(<span class="string">"消费者服务已关闭！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultMQPushConsumer <span class="title">getConsumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> consumer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息监听器bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/01/30 17:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 消息监听逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListenerConcurrently</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger =LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (list!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (MessageExt ext : list)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    logger.info(<span class="string">"监听到消息："</span>+<span class="keyword">new</span> String(ext.getBody(),<span class="string">"UTF-8"</span>));</span><br><span class="line">                &#125;<span class="keyword">catch</span> (UnsupportedEncodingException e)&#123;</span><br><span class="line">                    logger.info(<span class="string">"解码异常"</span>+e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>由于本项目是基于springboot开发，这里直接新建个config配置类，注入上面建的bean</p><p><strong>注意：</strong>下面的nameserver的ip需改成自己实际环境的ip</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/01/30 17:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 消息生产者实例配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Description: 生产者实例化</span></span><br><span class="line"><span class="comment">     * @Param: []</span></span><br><span class="line"><span class="comment">     * @Return: cn.loveyx815.rocketmq.spring.SpringProducer</span></span><br><span class="line"><span class="comment">     * @Author: Yonggang Shi</span></span><br><span class="line"><span class="comment">     * @Date: 2020/1/30/030 下午 5:35</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>,destroyMethod = <span class="string">"destroy"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringProducer <span class="title">getProducer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringProducer(<span class="string">"spring_producer_group"</span>,<span class="string">"ip:9876"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"messageListener"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageListener <span class="title">messageListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> MessageListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>,destroyMethod = <span class="string">"destory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringCousumer <span class="title">getCousumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//ApplicationContext context =</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringCousumer(<span class="string">"spring_producer_group"</span>,<span class="string">"ip:9876"</span>,<span class="string">"spring-rocketMQ-topic"</span>,messageListener());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>到此为止，准备工作都已完成，现在写两个单元测试进行验证下代码是否有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/01/31 14:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 消费者单测</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConsumerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpringCousumer cousumer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>*<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        cousumer.getConsumer().shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/01/31 14:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 生产者单测</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpringProducer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            Message message = <span class="keyword">new</span> Message(</span><br><span class="line">                    <span class="string">"spring-rocketMQ-topic"</span>,</span><br><span class="line">                    <span class="keyword">null</span>,</span><br><span class="line">                    (<span class="string">"spring-RocketMQ-demo"</span>+i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class="line">            );</span><br><span class="line">            SendResult sendResult = producer.getProducer().send(message);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"%s%n"</span>,sendResult);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后启动两个test，得到输出信息</p><p><img src="https://img-blog.csdnimg.cn/2020020115460184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="1580526909818"></p></li></ol><h2 id="4-消息顺序处理"><a href="#4-消息顺序处理" class="headerlink" title="4.消息顺序处理"></a>4.消息顺序处理</h2><blockquote><p>在业务中可能需要按照顺序消费的场景，而RocketMQ本身就支持这种顺序消费。</p><p>如电商系统中订单产生-加入购物车-将下单消息写入消息队列-用户取消-将取消订购的消息加入消息队列-从队列中消费订购消息-从队列中消费取消订购消息-<strong>往数据库中写入订购消息-从数据库中删除订购消息</strong>，在最后写入数据库和从数据库删除操作时，必须按照消息顺序执行，否则就会发生取消操作失败。</p><p>实际上与之前的生产消费类似，下面仅介绍下需要注意的地方。</p></blockquote><ul><li><p>消息生产者bean注入的时候，需要实例化一个<strong>消息队列选择器（MessageQueueSelector）</strong>，新建个选择器类实现<strong>MessageQueueSelector</strong>这个接口，自定义消息存储的规则，那些消息会进入同一个队列。实际调用生产者发送消息的时候send()，传入<strong>新建消息选择器</strong>的对象和对应消息和参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SendResult <span class="title">send</span><span class="params">(Message msg, MessageQueueSelector selector, Object arg)</span> <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defaultMQProducerImpl.send(msg, selector, arg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过实现这个重载方法来进入消息队列</p></li><li><p>消费者bean注入不同的是，消息监听器的实现接口不同，原来是用<strong>MessageListenerConcurrently</strong>，这种消息消费是无序的，所以我们想要有序的需实现<strong>MessageListenerOrderly</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RocketMQ消息队列&quot;&gt;&lt;a href=&quot;#RocketMQ消息队列&quot; class=&quot;headerlink&quot; title=&quot;RocketMQ消息队列&quot;&gt;&lt;/a&gt;RocketMQ消息队列&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简介：R
      
    
    </summary>
    
    
      <category term="MQ" scheme="http://blog.loveyx815.cn/categories/MQ/"/>
    
    
      <category term="Java开发总结" scheme="http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="MQ" scheme="http://blog.loveyx815.cn/tags/MQ/"/>
    
      <category term="分布式" scheme="http://blog.loveyx815.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="http://blog.loveyx815.cn/2020/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.loveyx815.cn/2020/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-19T08:56:00.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-观察者模式"><a href="#设计模式-观察者模式" class="headerlink" title="设计模式-观察者模式"></a>设计模式-观察者模式</h1><blockquote><p>观察者模式定义了对象之间的一对多依赖，当一个对象改变状态时，他的所有依赖者都会收到通知并自动更新</p></blockquote><h2 id="1-场景描述"><a href="#1-场景描述" class="headerlink" title="1. 场景描述"></a>1. 场景描述</h2><p>   通过气象站监测的数据，对外界进行公告展示。也就是气象站统计好数据后，确认修改完，公告那边也会收到改变后的数据。</p><h2 id="2-系统设计"><a href="#2-系统设计" class="headerlink" title="2. 系统设计"></a>2. 系统设计</h2><p>   <img src="https://img-blog.csdnimg.cn/20200418155606960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt=""></p><ul><li><p>首先定义两个接口，Subject主题和Observer观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主题接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//观察者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp , <span class="keyword">float</span> humidity , <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的Subject是和Observer有关联的，因为需要在Subject的实现中去通知Observer</p></li><li><p>Subject的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/04/17 17:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 主体实现发布通知对应观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span>  <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidtiy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.remove(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过遍历当前已注册的观察者对象，实现数据通信，让观察者进行更新展示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shiyonggang</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@creed</span>: Talk is cheap,show me the code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/4/18/018 下午 3:27</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;observers.size();i++)&#123;</span><br><span class="line">            Observer observer = (Observer) observers.get(i);</span><br><span class="line">            observer.update(temperature,humidtiy,pressure);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span></span>&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> humidtiy,<span class="keyword">float</span> pressure)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidtiy = humidtiy ;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对成功加入Subject的观察者进行统一更新，收集数据通过<strong>setMeasurements</strong> 收集，最终把收集的数据再发送给所有观察者对象。</p></li><li><p>观察者具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/04/18 01:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 观察者具体实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>,<span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过构造函数的Subject对当前对象进行注册观察者操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weatherData Subject 主题对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shiyonggang</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@creed</span>: Talk is cheap,show me the code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/4/18/018 下午 3:35</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData =  weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current conditions:"</span>+temperature+<span class="string">"F degrees  and "</span>+humidity+<span class="string">"% humidity"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在数据更新之后进行展示操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp 温度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> humidity 湿度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pressure  压力</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shiyonggang</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@creed</span>: Talk is cheap,show me the code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/4/18/018 下午 3:37</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的构造方法中引用了Subject的实现，这样是为了把当前这个观察者对象注册到对应的Subject中，也就是Observer的实现会依赖Subject。上面的Subject也有依赖Observer他的关系，通过接口的方式对两者依赖关系进行松耦合。</p></li><li><p>通过气象工作站进行收集更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        WeatherData weatherData =<span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        CurrentConditionDisplay currentConditionDisplay =<span class="keyword">new</span> CurrentConditionDisplay(weatherData);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200418155634351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt=""></p></li></ul><p>收集完数据之后，便通知了我们已注册进Subject的Observer。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式-观察者模式&quot;&gt;&lt;a href=&quot;#设计模式-观察者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-观察者模式&quot;&gt;&lt;/a&gt;设计模式-观察者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;观察者模式定义了对象之间的一对多依赖，当一个对象改
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://blog.loveyx815.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.loveyx815.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ消息队列-分布式事务</title>
    <link href="http://blog.loveyx815.cn/2020/04/19/mq/RocketMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>http://blog.loveyx815.cn/2020/04/19/mq/RocketMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-19T07:49:42.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RocketMQ消息队列"><a href="#RocketMQ消息队列" class="headerlink" title="RocketMQ消息队列"></a>RocketMQ消息队列</h1><p>[TOC]</p><h2 id="基于RocketMQ的分布式事务"><a href="#基于RocketMQ的分布式事务" class="headerlink" title="基于RocketMQ的分布式事务"></a>基于RocketMQ的分布式事务</h2><blockquote><p>在介绍RocketMQ的分布式事务之前，先来了解下什么事分布式事务？</p></blockquote><h2 id="一、分布式事务"><a href="#一、分布式事务" class="headerlink" title="一、分布式事务"></a>一、分布式事务</h2><ul><li><p>简介</p><blockquote><p>在分布式系统中，不止使用一个数据库，比如订单系统使用db_order数据库，产品系统使用的是db_product数据库，在订单系统中只能保证订单相关操作的事务，在产品系统中只能保证产品相关操作的事务。比如：如果在订单系统中进行生成订单、扣减库存的业务，如果出现异常，那么创建订单的事务会回滚，而扣减库存的事务则不会，因为本地事务是不能夸数据库的。跨库的事务就属于分布式事务。</p><p>把分布式系统中两个相关操作看成是一个单元，比如创建订单和修改库存的操作，该单元要么一起成功，要么一起失败，这就是分布式事务。</p></blockquote></li><li><p>关于分布式事务你不得不知的两个理论：</p></li></ul><blockquote><p>1、CAP定理<br>CAP原则又称CAP定理，指的是在一个分布式系统中，WEB服务无法同时满足以下3个特性：</p><p>一致性(Consistency) ： 在分布式系统中数据一旦更新，所有数据变动都是同步的</p><p>可用性(Availability) ： 好的响应性能，每个操作都必须有预期的响应结束</p><p>分区容错性(Partition tolerance) ： 在网络分区的情况下，即使出现单个节点无法可用，系统依然正常对外提供服务</p><p>首先在分布式系统中，横向扩展策略依赖于数据分区，所以一般会在一致性和可用性上做出牺牲。</p><p>2、BASE理论<br>BASE理论中的三个特性：</p><p>Basically Available（基本可用）</p><p>Soft state（软状态）</p><p>Eventually consistent（最终一致性）</p><p>三个特性分别指的是：</p><p>（1）基本可用是指分布式系统在出现不可预知的故障的时候，允许损失部分可用性——但请注意，这绝不等价于系统不可用。</p><p>（2）软状态，和硬状态对应，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统不同节点的数据副本之间进行数据同步的过程存在延时。</p><p>（3）最终一致性强调的是系统所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要试试保证系统数据的强一致性。</p><p>BASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consist  ency）。<br>————————————————<br>版权声明：本文为CSDN博主「坏菠萝」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/abcwanglinyong/article/details/82116669" target="_blank" rel="noopener">https://blog.csdn.net/abcwanglinyong/article/details/82116669</a></p></blockquote><h2 id="二、分布式事务解决方案"><a href="#二、分布式事务解决方案" class="headerlink" title="二、分布式事务解决方案"></a>二、分布式事务解决方案</h2><blockquote><p>分布式事务解决方案有很多种，这里针对RocketMQ本身介绍下<strong>两阶段提交</strong>（2PC）。因为本身RocketMQ的分布式事务消息就是基于消息中间件模拟的两阶段提价（2PC）。</p></blockquote><ul><li>主要分为以下几个步骤</li></ul><ol><li><p>系统A先向消息中间件发送一条预备消息，消息中间件保存还该消息后向系统A发送确认消息</p></li><li><p>系统A接收到MQ的确认消息后，执行本地事务</p></li><li><p>系统A根据本地事务执行结果再向MQ发送提交信息，以提交二次确认</p></li><li><p>MQ收到二次确认消息后，不预备消息标记为可投递，订阅者最终讲接收到该消息</p></li></ol><ul><li>在这过程中是如何进行回滚操作？</li></ul><ol><li><p>在本地事务未执行之前，也就是上面的1和2出错的话，不会进入后面的阶段，也就不会有问题</p></li><li><p>第3步出错系统A会实现一个消息回查接口，MQ服务端在等不到系统A反馈时会轮询该消息回查接口，检查系统A的本地事务执行结果。如果事务成功执行则进入下个阶段，否则回滚到第一步中。</p></li><li><p>第4布出错，此时系统A的本地事务已经提交成功，MQ服务端通过回查接口能够检查到该事务执行成功，那么由MQ服务端将预备消息标记为可投递，从而完成消息事务的处理。</p><p>至此可实现跨系统是分布式事务了。</p></li></ol><blockquote><p>整体的分布式事务被拆分成一个消息事务（系统A的本地事务+发消息）+系统B的本地事务，系统B的操作由消息驱动，这样系统A和系统B的事务便绑定在一起。</p></blockquote><ul><li><p>RocketMQ整体交互流程图如下：</p><p><img src="https://img-blog.csdnimg.cn/20200206105854909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="9873681-1e6612b094cb561d"></p></li></ul><ol><li>事务发起方首先发送准本预备消息到MQServer</li><li>MQServer向事务发起方ACK确认消息发送成功</li><li>事务发起方接收到确认消息后执行事务</li><li>事务发起方根据本地事务的执行结果返回commit或rollback给MQserver。如果发送的是rollback，则MQ将删除该预备消息不进行下发；否则MQ会把该预备消息发送给Consumer</li><li>如果在执行本地事务过程中该应用挂了或者超时，第4步提交的二次确认消息最终没有到达MQServer，MQServer将在经过一定时间后对该消息发起消息回查，通过不停的询问同组的其他的Producer来获取状态</li><li>发送方接受到回查消息后查询对应消息的本地事务执行结果</li><li>根据回查的本地事务的最终执行结果再次提交二次确认</li><li>消费端的消息成功机制是由MQ保证的 </li></ol><h2 id="三、RocketMQ事务消息实例"><a href="#三、RocketMQ事务消息实例" class="headerlink" title="三、RocketMQ事务消息实例"></a>三、RocketMQ事务消息实例</h2><p><strong>建议大家使用MQ的时候要选择MQ版本4.3以上的，而且pom文件引入的rocketmq-client版本号要与你服务器上的版本号一致，否则可能会出现No route info of this topic这样的异常信息，被这个坑惨了</strong></p><ul><li><p>事务消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/03 17:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Logger logger = LoggerFactory.getLogger(TransactionProducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">"transaction_producer_group"</span>);</span><br><span class="line"></span><br><span class="line">        producer.setNamesrvAddr(Consts.MQ_ADDR);</span><br><span class="line">        ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">5</span>, <span class="number">100</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2000</span>), (Runnable r) -&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(r);</span><br><span class="line">            thread.setName(<span class="string">"client-transaction-msg-check-thread"</span>);</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置本地事务执行的线程池</span></span><br><span class="line">        producer.setExecutorService(executorService);</span><br><span class="line">        producer.setTransactionListener(<span class="keyword">new</span> TransactionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message message, Object o)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//本地事务处理逻辑</span></span><br><span class="line">                logger.info(<span class="string">"本地事务执行。。。"</span>);</span><br><span class="line">                logger.info(<span class="string">"消息标签："</span>+<span class="keyword">new</span> String(message.getTags()));</span><br><span class="line">                logger.info(<span class="string">"消息内容："</span>+<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">                String tag = message.getTags();</span><br><span class="line">                <span class="keyword">if</span> (tag.equals(<span class="string">"Transaction1"</span>))&#123;</span><br><span class="line">                    <span class="comment">//消息的标签如果是Transaction1,则返回事务失败标记</span></span><br><span class="line">                    logger.error(<span class="string">"模拟本地事务执行失败"</span>);</span><br><span class="line">                    <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(<span class="string">"模拟本地事务成功"</span>);</span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt messageExt)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//消息回查接口</span></span><br><span class="line">                logger.info(<span class="string">"服务器调用消息回查接口"</span>);</span><br><span class="line">                logger.info(<span class="string">"消息标签："</span>+<span class="keyword">new</span> String(messageExt.getTags()));</span><br><span class="line">                logger.info(<span class="string">"消息内容："</span>+<span class="keyword">new</span> String(messageExt.getBody()));</span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            Message message=<span class="keyword">new</span> Message(<span class="string">"TopicTransaction"</span>,<span class="string">"Transaction"</span>+i,(<span class="string">"Hello Rocakmq transaction"</span>).getBytes());</span><br><span class="line">            SendResult sendResult =producer.sendMessageInTransaction(message,<span class="keyword">null</span>);</span><br><span class="line">            logger.info(String.valueOf(sendResult));</span><br><span class="line">            logger.info(<span class="string">""</span>);</span><br><span class="line">            TimeUnit.MICROSECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与普通生产者不同的地方是，这里需要调用<strong>setTransactionListener</strong>方法，通过自己实现<strong>TransactionListener</strong>接口的<strong>executeLocalTransaction</strong>执行本地事务和<strong>checkLocalTransaction</strong>消息回查方法</p></blockquote><p>执行结果说明有个事务消息挂了，实际上发送过去的就只有一条</p><p><img src="https://img-blog.csdnimg.cn/20200206110228640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="1580798226922"></p></li><li><p>事务消息消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/03 22:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>   Logger logger = LoggerFactory.getLogger(TransactionConsumer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line">        DefaultMQPushConsumer consumer =<span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"transaction_consumer_group"</span>);</span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">        consumer.setNamesrvAddr(Consts.MQ_ADDR);</span><br><span class="line">        consumer.subscribe(<span class="string">"TopicTransaction"</span>,<span class="string">"*"</span>);</span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">            <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg: list) &#123;</span><br><span class="line">                    logger.info(<span class="string">"消息消费者接收到消息"</span>+msg);</span><br><span class="line">                    logger.info(<span class="string">"接收到的消息标签："</span>+<span class="keyword">new</span> String(msg.getTags()));</span><br><span class="line">                    logger.info(<span class="string">"接收到消息内容："</span>+<span class="keyword">new</span> String(msg.getBody()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//模拟业务处理</span></span><br><span class="line">                    TimeUnit.SECONDS.sleep(random.nextInt(<span class="number">5</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span>  ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行事务消息消费者，仅消费了<strong>Transaction0</strong>，说明本地事务消息失败的没有被发过来</p><p><img src="https://img-blog.csdnimg.cn/20200206110235659.png" alt="1580798597842"></p></li></ul><h2 id="四、分布式事务实现新用户注册送积分"><a href="#四、分布式事务实现新用户注册送积分" class="headerlink" title="四、分布式事务实现新用户注册送积分"></a>四、分布式事务实现新用户注册送积分</h2><blockquote><p>背景介绍：新用户注册赠送积分。这里的流程就是把用户表格积分表分别放在不同的库，实现两者的跨库事务操作。</p></blockquote><p>这里我们主要介绍下核心代码，完整的源码可以follow<a href="https://github.com/rainandsunshine/Poet.git" target="_blank" rel="noopener">我的大型仓库</a> <a href="https://github.com/rainandsunshine/Poet.git" target="_blank" rel="noopener">https://github.com/rainandsunshine/Poet.git</a> </p><ul><li>下面分为两块，一个是配置双数据源，单个数据源不能实现跨库操作；二是RocketMQ的分布式事务在具体业务中如何实现。</li></ul><ol><li><p>配置双数据源，也就是一个系统里面连接两个库。这个项目使用的是JdbcTemplate作为持久层的开发，在SpringBoot中直接新建个配置类，给数据源都绑定好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/04 22:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 双数据源配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"testDataSource"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"testDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"spring.datasource.hikari.mysql"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"formalDataSource"</span>)</span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"formalDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.formal.mysql"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">formalDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"testJdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">testJdbcTemplate</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Qualifier(<span class="string">"testDataSource"</span>)</span>  DataSource testDataSource ) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(testDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"formalJdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">formalJdbcTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Qualifier(<span class="string">"formalDataSource"</span>)</span> DataSource formalDataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(formalDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Description:用户DAO层bean， 通过参数注入对应的jdbctemplate，实现对库绑定</span></span><br><span class="line"><span class="comment">     * @Param: [jdbcTemplate]</span></span><br><span class="line"><span class="comment">     * @Return: cn.loveyx815.rocketmq.mqtransaction.dao.UserDao</span></span><br><span class="line"><span class="comment">     * @Author: Yonggang Shi</span></span><br><span class="line"><span class="comment">     * @Date: 2020/2/5/005 下午 11:57</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">(@Qualifier(<span class="string">"testJdbcTemplate"</span>)</span> JdbcTemplate jdbcTemplate)</span>&#123;</span><br><span class="line">        UserDao userDao =<span class="keyword">new</span> UserDao();</span><br><span class="line">        userDao.setJdbcTemplate(jdbcTemplate);</span><br><span class="line">        <span class="keyword">return</span>  userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Description:积分DAO层bean， 通过参数注入对应的jdbctemplate，实现对库绑定</span></span><br><span class="line"><span class="comment">     * @Param: [jdbcTemplate]</span></span><br><span class="line"><span class="comment">     * @Return: cn.loveyx815.rocketmq.mqtransaction.dao.UserDao</span></span><br><span class="line"><span class="comment">     * @Author: Yonggang Shi</span></span><br><span class="line"><span class="comment">     * @Date: 2020/2/5/005 下午 11:57</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"pointDao"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PointDao <span class="title">getPointDao</span><span class="params">(@Qualifier(<span class="string">"formalJdbcTemplate"</span>)</span> JdbcTemplate jdbcTemplate)</span>&#123;</span><br><span class="line">        PointDao pointDao =<span class="keyword">new</span> PointDao();</span><br><span class="line">        pointDao.setJdbcTemplate(jdbcTemplate);</span><br><span class="line">        <span class="keyword">return</span>  pointDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置多数据源一定有个主要的数据源，不然程序加载就不能识别默认的，导致报错。@<strong>Primary</strong>注解加在你想加的<strong>DataSource</strong>上。</p><p>先注入两个<strong>DataSource</strong>的bean后，再分别注入<strong>JdbcTemplate</strong>中，最后把持久层的userDAO和pointDAO分贝注入不同的<strong>Jdbctemplate</strong>的bean，这样就可以实现多数经验绑定了。</p></li><li><p>下面就是介绍事务消息生产者和消费者</p><blockquote><p>除了那些基本的配置之外，主要的是在事务消息可以实现分布式事务，基于<strong>2PC</strong>(二阶段提交)前文已经介绍过了。</p><p>特别的地方就是在消息生产者生产的时候需要添加个本地事务监听器，用来监听本地事务执行状态，然后再发送消息。</p><p>而消费者也需要自己实现<strong>MessageListenerConcurrently</strong>接口的方法，可以在消费消息的时候做一些业务处理</p></blockquote></li></ol><ul><li><p>消息监听器TransactionMessageListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/04 18:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 事务消息监听器，用作消费者消费的监听逻辑实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListenerConcurrently</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PointService pointService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (MessageExt message:list)&#123;</span><br><span class="line">                logger.info(<span class="string">"消息消费者接收到消息:"</span>+message);</span><br><span class="line">                logger.info(<span class="string">"接收到消息内容:"</span>+<span class="keyword">new</span> String (message.getBody()));</span><br><span class="line">                <span class="comment">//从消息体中获取积分消息对象</span></span><br><span class="line">                UserPointMessage userPointMessage= JSON.parseObject(message.getBody(),UserPointMessage<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (userPointMessage!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    Point point = <span class="keyword">new</span> Point();</span><br><span class="line">                    point.setUserId(userPointMessage.getUserId());</span><br><span class="line">                    point.setAmount(userPointMessage.getAmount());</span><br><span class="line">                    <span class="comment">//保存用户积分记录并提交本地事务</span></span><br><span class="line">                    pointService.savePoint(point);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"消息消费出错"</span>+e);</span><br><span class="line">            <span class="keyword">return</span>  ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正常消费成功</span></span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>本地事务监听器UserLocalTransactionListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/04 18:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 本地事务监听器，用作生产者生产消息的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLocalTransactionListener</span> <span class="keyword">implements</span> <span class="title">TransactionListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message message, Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//本地事务处理逻辑</span></span><br><span class="line">        logger.info(<span class="string">"本地事务执行。。。"</span>);</span><br><span class="line">        logger.info(<span class="string">"消息标签："</span>+<span class="keyword">new</span> String(message.getTags()));</span><br><span class="line">        logger.info(<span class="string">"消息内容："</span>+<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        <span class="comment">//从消息体重获取积分消息对象</span></span><br><span class="line">        UserPointMessage userPointMessage = JSON.parseObject(message.getBody(), UserPointMessage<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//保存用户记录并提交本地事务</span></span><br><span class="line">        userService.saveUser(userPointMessage.getUserId(),userPointMessage.getUserName());</span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt messageExt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//消息回查接口</span></span><br><span class="line">        logger.info(<span class="string">"服务器调用消息回查接口"</span>);</span><br><span class="line">        logger.info(<span class="string">"消息标签："</span>+<span class="keyword">new</span> String(messageExt.getTags()));</span><br><span class="line">        logger.info(<span class="string">"消息内容："</span>+<span class="keyword">new</span> String(messageExt.getBody()));</span><br><span class="line">        <span class="comment">//从消息体重获取积分消息对象</span></span><br><span class="line">        UserPointMessage userPointMessage = JSON.parseObject(messageExt.getBody(),UserPointMessage<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (userPointMessage!= <span class="keyword">null</span>)&#123;</span><br><span class="line">            String userId = userPointMessage.getUserId();</span><br><span class="line">            <span class="keyword">if</span> (userService.getById(userId) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                logger.info(<span class="string">"本地插入用户表成功！"</span>);</span><br><span class="line"><span class="comment">//                表示本地事务执行成功</span></span><br><span class="line">                <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用@<strong>Component</strong>注解来标识这两个监听器注入Spring容器，然后在生产者、消费者配置类中分别引用这两个监听器bean。</p></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/04 17:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 消息生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionSpringProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="keyword">private</span> String producerGroupName;</span><br><span class="line">    <span class="keyword">private</span> String nameServerAdd;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maximumPoolSize = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> keepAliveTime = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> TransactionMQProducer producer;</span><br><span class="line">    <span class="keyword">private</span> TransactionListener transactionListener;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransactionSpringProducer</span><span class="params">(String producerGroupName,String nameServerAdd,<span class="keyword">int</span> corePoolSize,<span class="keyword">int</span> maximumPoolSize,<span class="keyword">long</span> keepAliveTime,TransactionListener transactionListener)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize=corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime=keepAliveTime;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize=maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.nameServerAdd=nameServerAdd;</span><br><span class="line">        <span class="keyword">this</span>.producerGroupName=producerGroupName;</span><br><span class="line">        <span class="keyword">this</span>.transactionListener=transactionListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始启动消息生产者服务。。。"</span>);</span><br><span class="line"></span><br><span class="line">        producer = <span class="keyword">new</span> TransactionMQProducer(producerGroupName);</span><br><span class="line">        producer.setNamesrvAddr(nameServerAdd);</span><br><span class="line">        ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime, TimeUnit.SECONDS,<span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2000</span>),(Runnable r )-&gt;&#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(r);</span><br><span class="line">            thread.setName(<span class="string">"client-transaction-msg-check-thread"</span>);</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;);</span><br><span class="line">        producer.setExecutorService(executorService);</span><br><span class="line">        producer.setTransactionListener(transactionListener);</span><br><span class="line">        producer.start();</span><br><span class="line">        logger.info(<span class="string">"消息生产者已启动！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始关闭消息生产服务。。"</span>);</span><br><span class="line">        producer.shutdown();</span><br><span class="line">        logger.info(<span class="string">"生产者服务已关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultMQProducer <span class="title">getProducer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> producer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/04 18:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionSpringConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String consumerGropuName;</span><br><span class="line">    <span class="keyword">private</span> String nameServerAddr;</span><br><span class="line">    <span class="keyword">private</span> String topicName;</span><br><span class="line">    <span class="keyword">private</span> DefaultMQPushConsumer consumer;</span><br><span class="line">    <span class="keyword">private</span> MessageListenerConcurrently messageListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransactionSpringConsumer</span><span class="params">(String consumerGropuName,String nameServerAddr,String topicName,MessageListenerConcurrently messageListener)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.consumerGropuName=consumerGropuName;</span><br><span class="line">        <span class="keyword">this</span>.messageListener=messageListener;</span><br><span class="line">        <span class="keyword">this</span>.nameServerAddr=nameServerAddr;</span><br><span class="line">        <span class="keyword">this</span>.topicName=topicName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始启动消息消费者服务。。。"</span>);</span><br><span class="line">        consumer=<span class="keyword">new</span> DefaultMQPushConsumer(consumerGropuName);</span><br><span class="line">        consumer.setNamesrvAddr(nameServerAddr);</span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">        consumer.subscribe(topicName,<span class="string">"*"</span>);</span><br><span class="line">        consumer.registerMessageListener(messageListener);</span><br><span class="line">        consumer.start();</span><br><span class="line">        logger.info(<span class="string">"消息消费者服务启动成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始关闭消息消费者服务。。"</span>);</span><br><span class="line">        consumer.shutdown();</span><br><span class="line">        logger.info(<span class="string">"消费者服务已关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  DefaultMQPushConsumer <span class="title">getConsumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  consumer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者、消费者配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/04 18:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionSpringConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String consumerGropuName;</span><br><span class="line">    <span class="keyword">private</span> String nameServerAddr;</span><br><span class="line">    <span class="keyword">private</span> String topicName;</span><br><span class="line">    <span class="keyword">private</span> DefaultMQPushConsumer consumer;</span><br><span class="line">    <span class="keyword">private</span> MessageListenerConcurrently messageListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransactionSpringConsumer</span><span class="params">(String consumerGropuName,String nameServerAddr,String topicName,MessageListenerConcurrently messageListener)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.consumerGropuName=consumerGropuName;</span><br><span class="line">        <span class="keyword">this</span>.messageListener=messageListener;</span><br><span class="line">        <span class="keyword">this</span>.nameServerAddr=nameServerAddr;</span><br><span class="line">        <span class="keyword">this</span>.topicName=topicName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始启动消息消费者服务。。。"</span>);</span><br><span class="line">        consumer=<span class="keyword">new</span> DefaultMQPushConsumer(consumerGropuName);</span><br><span class="line">        consumer.setNamesrvAddr(nameServerAddr);</span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line">        consumer.subscribe(topicName,<span class="string">"*"</span>);</span><br><span class="line">        consumer.registerMessageListener(messageListener);</span><br><span class="line">        consumer.start();</span><br><span class="line">        logger.info(<span class="string">"消息消费者服务启动成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"开始关闭消息消费者服务。。"</span>);</span><br><span class="line">        consumer.shutdown();</span><br><span class="line">        logger.info(<span class="string">"消费者服务已关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  DefaultMQPushConsumer <span class="title">getConsumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  consumer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就已经完成了分布式事务生产消费的工作，还有相关的service和dao代码就不贴了，<a href="https://github.com/rainandsunshine/Poet.git" target="_blank" rel="noopener">这里</a> 都有！</p></li></ul></li><li><p>单元测试分布式事务生产消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: Yonggang Shi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/02/04 23:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= &#123;RocketmqApplication<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MQConfigTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        userService.newUserAndPoint(<span class="string">"分布式事务测试"</span>,<span class="number">100</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200206110253237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="1580921850968" title="">                </div>                <div class="image-caption">1580921850968</div>            </figure><p>我们再 看下两个库是否也更新了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200206110258342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0d1aXRhcmY=,size_16,color_FFFFFF,t_70" alt="1580922010823" title="">                </div>                <div class="image-caption">1580922010823</div>            </figure><p>至此分布式事务已完成实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RocketMQ消息队列&quot;&gt;&lt;a href=&quot;#RocketMQ消息队列&quot; class=&quot;headerlink&quot; title=&quot;RocketMQ消息队列&quot;&gt;&lt;/a&gt;RocketMQ消息队列&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;基于RocketMQ的分
      
    
    </summary>
    
    
      <category term="MQ" scheme="http://blog.loveyx815.cn/categories/MQ/"/>
    
    
      <category term="Java开发总结" scheme="http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="MQ" scheme="http://blog.loveyx815.cn/tags/MQ/"/>
    
      <category term="分布式" scheme="http://blog.loveyx815.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.loveyx815.cn/2020/04/08/hello-world/"/>
    <id>http://blog.loveyx815.cn/2020/04/08/hello-world/</id>
    <published>2020-04-08T04:03:59.130Z</published>
    <updated>2020-04-08T02:27:31.553Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>test my blog</title>
    <link href="http://blog.loveyx815.cn/2020/04/07/%E5%8D%97%E4%BA%ACSQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/"/>
    <id>http://blog.loveyx815.cn/2020/04/07/%E5%8D%97%E4%BA%ACSQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</id>
    <published>2020-04-06T16:00:00.000Z</published>
    <updated>2020-04-08T03:25:23.627Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、理论部分"><a href="#一、理论部分" class="headerlink" title="一、理论部分"></a>一、理论部分</h1><ol><li>abase执行SQL语句时，首先通过语法分析模块（词法分析、语法分析(语法树)、语义分析（查询树）），然后通过查询优化器进行逻辑优化和物理优化，生成计划树，就是执行计划。</li><li>逻辑优化: 是基于规则的优化，对SQL进行重写。比如谓词下推，连接顺序交换等。</li><li>物理优化：是基于代价的优化，数据库建立了各种代价模型，对各种物理路径进行代价的评估，选择一条代价相对较低的执行。物理路径包括扫描路径、连接路径等。</li><li>代价计算: 代价的计算需要用到统计信息和选择率。统计信息记录了表内数据的抽样信息，定期进行统计。根据统计信息，数据库可以计算出一个约束条件可以过滤掉多少数据，计算出选择率。根据选择率可以得到各种物理路径的代价。</li><li>连接路径: 嵌套循环连接、哈希连接、归并连接。</li></ol><h1 id="二、执行计划查看命令"><a href="#二、执行计划查看命令" class="headerlink" title="二、执行计划查看命令"></a>二、执行计划查看命令</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>explain[(option[,…])]<br>explain [analyze][verbose]statement<br>可选的option选项有：  </p><ul><li>analyze[boolean]：得到statement的真实运行时间。默认是false  </li><li>verbose[boolean]：得到statement语句的执行计划和执行计划中的每个节点的详细信息。默认为false  </li><li>costs[boolean]：得到计划中每个接地哪的cost，rows，width的估算值，默认为true  </li><li>buffers[boolean]：analyze出现时可选。缓存的使用情况<br>共享缓存(shared blocks)的hit，read，dirtied，written数值<br>本地缓存(local blocks)的hit，read，dirtied,written数值<br>临时快(temp blocks)的read,written数值  </li><li>timing[boolean]：analyze出现时可选。显示每个节点的启动时间和总时间花费。默认true  </li><li>format{text|xml|json|yaml}：指定执行计划的输出格式<br>text：默认值。以行为单位，显示每个结点的计划信息，以缩进格式表示子节点的计划信息。buffers参数时的文本格式，只输出非零值<br>xml：xml格式<br>json：json格式<br>yaml：以yaml格式显示执行计划  </li></ul></blockquote><h2 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h2><ul><li>一般查询<br>explain analyze select … ;</li><li>查询缓存及详细信息<br>explain (analyze,verbose,buffers) select … ;</li><li>针对更新插入删除的执行计划查询<br>begin;<br>explain analyze insert/update/delete … ;<br>rollback;  </li></ul><h1 id="三、具体优化案例"><a href="#三、具体优化案例" class="headerlink" title="三、具体优化案例"></a>三、具体优化案例</h1><h2 id="3-1查询计划解读"><a href="#3-1查询计划解读" class="headerlink" title="3.1查询计划解读"></a>3.1查询计划解读</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li>cost:重要的指标。cost=0.00..16.11有两个部分，启动时间=0.00 和总时间=16.11。单位是毫秒。这个指标也只是预测值。启动时间也有解释为找到符合条件的第一行所花的时间。</li><li>rows:返回的行数，如果执行vacuum和analyze那么返回的结果更加接近实际值</li><li>width:查询结果所有字段的总宽度，并非关键指标。</li><li>actual time：实际花费的时间。</li><li>loops：循环的次数</li><li>buffers：缓冲命中数</li><li>output： 输出的字段名</li><li>planning time: 生成执行计划时间</li><li>execution time：执行执行计划时间  </li></ul><h3 id="阅读顺序"><a href="#阅读顺序" class="headerlink" title="阅读顺序"></a>阅读顺序</h3><ul><li>嵌套层次最深的，最先执行</li><li>同样嵌套深度的，从上到下，先予执行</li><li>每一步的cost包括上一步</li></ul><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><ul><li>Seq Scan: 表扫描</li><li>Index Scan：索引扫描(读取索引块，然后读取数据文件)</li><li>Index Only Scan：索引只读扫描(只读取索引文件，根据映射文件获取数据)</li><li>Nested [(type)] Loop：嵌套循环连接。type可能是Inner，left，right，full，semi，anti。inner的可以显示省略</li><li>Merge[(type)] Join 归并连接。type同上</li><li>Hash[(type)] Join：哈希连接。type同上 </li></ul><h2 id="3-2现场具体SQL查看"><a href="#3-2现场具体SQL查看" class="headerlink" title="3.2现场具体SQL查看"></a>3.2现场具体SQL查看</h2><h3 id="3-2-1第一个SQL，砍掉所有无用部分"><a href="#3-2-1第一个SQL，砍掉所有无用部分" class="headerlink" title="3.2.1第一个SQL，砍掉所有无用部分"></a>3.2.1第一个SQL，砍掉所有无用部分</h3><p>set PGPASSWORD=tusc@6789#JKL<br>E:\thunisoft\arterybase\3.6\bin\psql -Usa -h172.23.21.124 -p6543  -dzfxt_zf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">explain analyze </span><br><span class="line">WITH xgr AS (</span><br><span class="line">SELECT xyr.c_id_ajxx, string_agg((xyr.c_xyrxm), &#39;,&#39;) AS xyr </span><br><span class="line">FROM db_yw.t_jc_gaxyr xyr </span><br><span class="line">INNER JOIN (SELECT DISTINCT c_ajid FROM db_yw.t_sacw_cwjbxx_copy) jb ON jb.c_ajid &#x3D; xyr.c_id_ajxx </span><br><span class="line">GROUP BY xyr.c_id_ajxx) </span><br><span class="line">SELECT count(*) </span><br><span class="line">FROM (SELECT aj.c_id C_AJID, MAX(aj.c_ajmc) C_AJMC, MAX(aj.c_ajbh) c_ajbh, MAX(xgr.xyr) C_XGR, MAX(aj.d_lasj) D_LARQ, MAX(fbxx.c_sydw) C_YSDW </span><br><span class="line">        FROM db_yw.t_sacw_cwjbxx_copy jbxx </span><br><span class="line">        INNER JOIN db_yw.t_jc_gaaj aj ON jbxx.c_ajid &#x3D; aj.c_id </span><br><span class="line">        INNER JOIN db_yw.t_sacw_cwfbxx_copy fbxx ON jbxx.c_id&#x3D;fbxx.c_cwxx_id </span><br><span class="line">        LEFT JOIN xgr ON jbxx.c_ajid &#x3D; xgr.c_id_ajxx </span><br><span class="line">WHERE fbxx.c_ysdw IN (SELECT getdept(&#39;0001ZZ10000000009UAL&#39;)) AND c_cwzt  NOT IN (&#39;1&#39;, &#39;9&#39;) GROUP BY aj.c_id) table_count</span><br></pre></td></tr></table></figure><p>问题</p><ol><li>缺少外键索引</li><li>with 中的t_sacw_cwjbxx_copy不需要关联</li><li>没必要用with语句</li><li>求count(*)并且案件表left join xgr的子查询，因此数量没有变化。没必要连接。</li><li>对aj.c_id分组求max后取count(*),相当于对aj.c_id去重后求总数</li><li>t_sacw_cwjbxx_copy 仅为了传递连接，可以在t_sacw_cwfbxx_copy中冗余案件主表编号</li><li>现场数据库经历长时间更新删除等未及时进行VACUUM清理无效数据。引起表放大的问题。</li><li>列表查询求总数的SQL一定不要直接用查列表SQL套一个count(*)</li></ol><p>修改后SQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">explain analyze</span><br><span class="line">select count(distinct aj.c_id) from db_yw.t_sacw_cwfbxx_copy fbxx</span><br><span class="line">JOIN db_yw.t_jc_gaaj aj ON fbxx.c_ajid &#x3D; aj.c_id </span><br><span class="line">WHERE fbxx.c_ysdw IN (SELECT getdept(&#39;0001ZZ10000000009UAL&#39;)) </span><br><span class="line">AND c_cwzt  NOT IN (&#39;1&#39;, &#39;9&#39;) ;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-前一个SQL对应的列表查询-提前缩小结果集大小"><a href="#3-2-2-前一个SQL对应的列表查询-提前缩小结果集大小" class="headerlink" title="3.2.2 前一个SQL对应的列表查询,提前缩小结果集大小"></a>3.2.2 前一个SQL对应的列表查询,提前缩小结果集大小</h3><p>案件列表查询，建议先查出符合条件的案件，然后再拼接xyr信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select aj.c_id C_AJID, MAX(aj.c_ajmc) C_AJMC, MAX(aj.c_ajbh) c_ajbh,  MAX(aj.d_lasj) D_LARQ, MAX(fbxx.c_sydw) C_YSDW </span><br><span class="line">from db_yw.t_sacw_cwfbxx_copy fbxx</span><br><span class="line">JOIN db_yw.t_jc_gaaj aj ON fbxx.c_ajid &#x3D; aj.c_id </span><br><span class="line">WHERE fbxx.c_ysdw IN (SELECT getdept(&#39;0001ZZ10000000009UAL&#39;)) </span><br><span class="line">AND c_cwzt  NOT IN (&#39;1&#39;, &#39;9&#39;) group by aj.c_id limit 20</span><br></pre></td></tr></table></figure><p>一步从数据库获取包括嫌疑人的案件列表。提前通过限制条件及limit减小结果集大小，然后再关联xyr表进行分组拼接xyrxm。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">with aaj as (</span><br><span class="line">select aj.c_id C_AJID, MAX(aj.c_ajmc) C_AJMC, MAX(aj.c_ajbh) c_ajbh,  </span><br><span class="line">MAX(aj.d_lasj) D_LARQ, MAX(fbxx.c_sydw) C_YSDW </span><br><span class="line">from db_yw.t_sacw_cwfbxx_copy fbxx</span><br><span class="line">JOIN db_yw.t_jc_gaaj aj ON fbxx.c_ajid &#x3D; aj.c_id </span><br><span class="line">WHERE fbxx.c_ysdw IN (SELECT getdept(&#39;0001ZZ10000000009UAL&#39;)) </span><br><span class="line">AND c_cwzt  NOT IN (&#39;1&#39;, &#39;9&#39;) group by aj.c_id limit 20 )</span><br><span class="line">select aaj.C_AJID,max(aaj.C_AJMC),max(aaj.c_ajbh),max(aaj.D_LARQ),max(aaj.C_YSDW),string_agg((xyr.c_xyrxm), &#39;,&#39;) AS xyrxm  from aaj join db_yw.t_jc_gaxyr xyr  on aaj.C_AJID &#x3D; xyr.c_id_ajxx</span><br><span class="line">group by aaj.C_AJID</span><br></pre></td></tr></table></figure><h3 id="3-2-3体会一下pg对not-exists的逻辑优化"><a href="#3-2-3体会一下pg对not-exists的逻辑优化" class="headerlink" title="3.2.3体会一下pg对not exists的逻辑优化"></a>3.2.3体会一下pg对not exists的逻辑优化</h3><p>E:\thunisoft\arterybase\3.6\bin\psql -Usa -h172.23.18.110 -p6543 -ddb_hjgl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">select * from ( </span><br><span class="line">  select &#39;xk&#39; as type, s.c_ajmc as ajmc, s.c_bar as bar, r.c_xm as bkr, r.c_id as bkrid, &#39;实施边控&#39; cslxmc, s.c_id as id, to_char(s.dt_bkkhrq, &#39;yyyy-mm-dd&#39;) as skrq, s.c_bkbbbh as ykbbbh, to_char(s.dt_bkzkrq, &#39;yyyy-mm-dd&#39;) as zkrq </span><br><span class="line">  from db_hjgl.t_ry r </span><br><span class="line">  join db_hjgl.t_sq s on s.c_id &#x3D; r.c_sqid </span><br><span class="line">  where (not exists(select 1 from db_hjgl.t_ykry y where r.c_id &#x3D; y.c_yryid) </span><br><span class="line">    and not exists(select 1 from db_hjgl.t_ckry c where c.c_xkryid &#x3D; r.c_id and n_sfcxbk &#x3D; 1)) </span><br><span class="line">    and s.dt_bkzkrq &gt; now() </span><br><span class="line">    and s.n_sqzt &#x3D; 7 </span><br><span class="line">  union </span><br><span class="line">  select &#39;yk&#39; as type, s.c_ajmc as ajmc, s.c_bar as bar, r.c_xm as bkr, r.c_id as bkrid, &#39;延长边控&#39; cslxmc, s.c_id as id, to_char(s.dt_bkkhrq, &#39;yyyy-mm-dd&#39;) as skrq, s.c_bkbbbh as ykbbbh, to_char(s.dt_bkzkrq, &#39;yyyy-mm-dd&#39;) as zkrq </span><br><span class="line">  from db_hjgl.t_ykry r </span><br><span class="line">  join db_hjgl.t_sq s on s.c_id &#x3D; r.c_sqid </span><br><span class="line">  where not exists(select 1 from db_hjgl.t_ckry c where c.c_ykryid &#x3D; r.c_id and n_sfcxbk &#x3D; 1) </span><br><span class="line">  and not exists(select 1 from db_hjgl.t_ykry y where y.c_yryid &#x3D; r.c_id)</span><br><span class="line">  and s.dt_bkzkrq &gt; now() </span><br><span class="line">  and s.n_sqzt &#x3D; 7 </span><br><span class="line">)t WHERE 1 &#x3D; 1 order by t.skrq limit &#39;10&#39;::int offset (&#39;1&#39;::int - 1) * &#39;10&#39;::int</span><br></pre></td></tr></table></figure><p>执行计划</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Nested Loop Anti Join  (cost&#x3D;12.16..29.83 rows&#x3D;11 width&#x3D;232) (actual time&#x3D;0.172..0.250 rows&#x3D;15 loops&#x3D;1)  </span><br><span class="line">  Join Filter: (r.c_id &#x3D; (c.c_xkryid)::bpchar)  </span><br><span class="line">  Rows Removed by Join Filter: 15  </span><br><span class="line">  -&gt;  Hash Anti Join  (cost&#x3D;12.16..18.23 rows&#x3D;11 width&#x3D;120) (actual time&#x3D;0.155..0.217 rows&#x3D;15 loops&#x3D;1)  </span><br><span class="line">        Hash Cond: (r.c_id &#x3D; y.c_yryid)  </span><br><span class="line">        -&gt;  Hash Join  (cost&#x3D;10.83..16.75 rows&#x3D;12 width&#x3D;120) (actual time&#x3D;0.125..0.182 rows&#x3D;24 loops&#x3D;1)  </span><br><span class="line">              Hash Cond: ((r.c_sqid)::bpchar &#x3D; s.c_id)  </span><br><span class="line">              -&gt;  Seq Scan on t_ry r  (cost&#x3D;0.00..5.31 rows&#x3D;131 width&#x3D;72) (actual time&#x3D;0.008..0.027 rows&#x3D;142 loops&#x3D;1)</span><br><span class="line">              -&gt;  Hash  (cost&#x3D;10.59..10.59 rows&#x3D;19 width&#x3D;81) (actual time&#x3D;0.108..0.108 rows&#x3D;24 loops&#x3D;1)</span><br><span class="line">                    Buckets: 1024  Batches: 1  Memory Usage: 11kB</span><br><span class="line">                    -&gt;  Seq Scan on t_sq s  (cost&#x3D;0.00..10.59 rows&#x3D;19 width&#x3D;81) (actual time&#x3D;0.007..0.099 rows&#x3D;24 loops&#x3D;1)</span><br><span class="line">                          Filter: ((n_sqzt &#x3D; 7) AND (dt_bkzkrq &gt; now()))</span><br><span class="line">                          Rows Removed by Filter: 197</span><br><span class="line">        -&gt;  Hash  (cost&#x3D;1.15..1.15 rows&#x3D;15 width&#x3D;33) (actual time&#x3D;0.025..0.025 rows&#x3D;15 loops&#x3D;1)</span><br><span class="line">              Buckets: 1024  Batches: 1  Memory Usage: 9kB</span><br><span class="line">              -&gt;  Seq Scan on t_ykry y  (cost&#x3D;0.00..1.15 rows&#x3D;15 width&#x3D;33) (actual time&#x3D;0.004..0.022 rows&#x3D;15 loops&#x3D;1)</span><br><span class="line">  -&gt;  Materialize  (cost&#x3D;0.00..11.38 rows&#x3D;1 width&#x3D;82) (actual time&#x3D;0.000..0.000 rows&#x3D;1 loops&#x3D;15)</span><br><span class="line">        -&gt;  Seq Scan on t_ckry c  (cost&#x3D;0.00..11.38 rows&#x3D;1 width&#x3D;82) (actual time&#x3D;0.004..0.004 rows&#x3D;1 loops&#x3D;1)</span><br><span class="line">              Filter: (n_sfcxbk &#x3D; 1)</span><br><span class="line">Planning time: 0.409 ms</span><br><span class="line">Execution time: 0.324 ms</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="E:/zz/南京/join.jpg" alt="join示意图" title="">                </div>                <div class="image-caption">join示意图</div>            </figure>   <p>等价SQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select &#39;xk&#39; as type, s.c_ajmc as ajmc, s.c_bar as bar, r.c_xm as bkr, r.c_id as bkrid, &#39;实施边控&#39; cslxmc, s.c_id as id, to_char(s.dt_bkkhrq, &#39;yyyy-mm-dd&#39;) as skrq, s.c_bkbbbh as ykbbbh, to_char(s.dt_bkzkrq, &#39;yyyy-mm-dd&#39;) as zkrq </span><br><span class="line">from db_hjgl.t_ry r </span><br><span class="line">join db_hjgl.t_sq s on s.c_id &#x3D; r.c_sqid </span><br><span class="line">left join db_hjgl.t_ykry y on r.c_id&#x3D;y.c_yryid </span><br><span class="line">left join db_hjgl.t_ckry c on r.c_id&#x3D;c.c_xkryid and c.n_sfcxbk&#x3D;1</span><br><span class="line">where y.c_yryid is null and c.c_xkryid is null and s.dt_bkzkrq &gt; now() and s.n_sqzt &#x3D; 7</span><br></pre></td></tr></table></figure><h3 id="3-3-4-其它部门的SQL1，利用with减少表扫描次数"><a href="#3-3-4-其它部门的SQL1，利用with减少表扫描次数" class="headerlink" title="3.3.4 其它部门的SQL1，利用with减少表扫描次数"></a>3.3.4 其它部门的SQL1，利用with减少表扫描次数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  COUNT (DISTINCT(xfj.petition_no)) </span><br><span class="line">  FROM ods_jzw.petition_basic_info xfj</span><br><span class="line">  RIGHT JOIN ods_jzw.petition_deal_info deal ON xfj.oid &#x3D;   deal.petition_basic_info_oid</span><br><span class="line">  left join ods_jzw.t_xf_code as code on xfj.region_code &#x3D; code.c_code and   code.c_pid &#x3D; &#39;XZQH&#39;</span><br><span class="line">  WHERE deal.create_date&gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">  AND deal.create_date&lt;to_timestamp(&#39;2019-04&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT</span><br><span class="line">  COUNT (DISTINCT(xfj.petition_no)) </span><br><span class="line">  FROM ods_jzw.petition_basic_info xfj</span><br><span class="line">  RIGHT JOIN ods_jzw.petition_deal_info deal ON xfj.oid &#x3D; deal.petition_basic_info_oid</span><br><span class="line">  left join ods_jzw.t_xf_code as code on xfj.region_code &#x3D; code.c_code</span><br><span class="line">  and code.c_pid &#x3D; &#39;XZQH&#39;</span><br><span class="line">  WHERE xfj.petition_class_code &#x3D; &#39;1&#39; AND deal.create_date&gt;&#x3D;   to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">  AND deal.create_date&lt; to_timestamp(&#39;2019-04&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT</span><br><span class="line">  COUNT (DISTINCT(xfj.petition_no)) </span><br><span class="line">  FROM ods_jzw.petition_basic_info xfj</span><br><span class="line">  RIGHT JOIN ods_jzw.petition_deal_info deal</span><br><span class="line">  ON xfj.oid &#x3D; deal.petition_basic_info_oid</span><br><span class="line">  left join ods_jzw.t_xf_code as code on xfj.region_code &#x3D; code.c_code and   code.c_pid &#x3D; &#39;XZQH&#39;</span><br><span class="line">  WHERE xfj.petition_class_code &#x3D; &#39;1&#39; AND xfj.repeat_flag !&#x3D; &#39;1&#39; AND deal.create_date&gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">  AND deal.create_date&lt; to_timestamp(&#39;2019-04&#39;, &#39;yyyy-MM&#39;)</span><br></pre></td></tr></table></figure><p>改写后SQL，速度提高1倍以上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">with xfj as ( select xfj.petition_no,xfj.petition_class_code,xfj.repeat_flag from  </span><br><span class="line">ods_jzw.petition_basic_info xfj </span><br><span class="line">RIGHT JOIN ods_jzw.petition_deal_info deal</span><br><span class="line">ON xfj.oid &#x3D; deal.petition_basic_info_oid</span><br><span class="line">left join ods_jzw.t_xf_code as code on xfj.region_code &#x3D; code.c_code and code.c_pid &#x3D; &#39;XZQH&#39; </span><br><span class="line">WHERE</span><br><span class="line"> deal.create_date&gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line"> AND deal.create_date&lt;to_timestamp(&#39;2019-04&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)</span><br><span class="line">SELECT COUNT (distinct xfj.petition_no)</span><br><span class="line">  FROM xfj</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT COUNT (DISTINCT(xfj.petition_no))</span><br><span class="line">  FROM  xfj WHERE xfj.petition_class_code &#x3D; &#39;1&#39; </span><br><span class="line">UNION ALL</span><br><span class="line">SELECT COUNT (DISTINCT(xfj.petition_no))</span><br><span class="line">  FROM xfj WHERE xfj.petition_class_code &#x3D; &#39;1&#39; AND xfj.repeat_flag !&#x3D; &#39;1&#39;</span><br></pre></td></tr></table></figure><h3 id="3-3-5-其它部门的SQL1，超级长SQL"><a href="#3-3-5-其它部门的SQL1，超级长SQL" class="headerlink" title="3.3.5 其它部门的SQL1，超级长SQL"></a>3.3.5 其它部门的SQL1，超级长SQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line">SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as ddjlbj FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE </span><br><span class="line">d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE </span><br><span class="line">d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND </span><br><span class="line">d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbj</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as ddjlsl FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code, 1, 4) in(&#39;0121&#39;,&#39;0122&#39;,&#39;0124&#39;,&#39;0123&#39;,&#39;0125&#39;,&#39;0126&#39;)) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code, 1, 4) in(&#39;0121&#39;,&#39;0122&#39;,&#39;0124&#39;,&#39;0123&#39;,&#39;0125&#39;,&#39;0126&#39;)) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code, 1, 4) in(&#39;0121&#39;,&#39;0122&#39;,&#39;0124&#39;,&#39;0123&#39;,&#39;0125&#39;,&#39;0126&#39;)) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code, 1, 4) in(&#39;0121&#39;,&#39;0122&#39;,&#39;0124&#39;,&#39;0123&#39;,&#39;0125&#39;,&#39;0126&#39;)) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtsl</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as zzjlbj FROM  </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;501&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE </span><br><span class="line">d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;501&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE </span><br><span class="line">d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;501&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;501&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND </span><br><span class="line">d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbj</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as zzjlsl FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0121&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0121&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0121&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0121&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtsl</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as zjlbj FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;565&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE </span><br><span class="line">d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;565&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE </span><br><span class="line">d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;565&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;565&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND </span><br><span class="line">d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbj</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as zjlsl FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0122&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0122&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0122&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0122&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtsl</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as ljjlbj FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;610&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE </span><br><span class="line">d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;610&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE </span><br><span class="line">d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;610&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;610&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND </span><br><span class="line">d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbj</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as ljjlsl FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0123&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0123&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0123&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0123&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtsl</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as qzjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;672&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE </span><br><span class="line">d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;672&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE </span><br><span class="line">d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;672&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;672&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND </span><br><span class="line">d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbj</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as qzjlsl FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0124&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0124&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0124&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0124&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtsl</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as gzjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;692&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE </span><br><span class="line">d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;692&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE </span><br><span class="line">d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;692&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;692&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND </span><br><span class="line">d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbj</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as gzjlsl FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0125&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0125&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0125&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0125&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtsl</span><br><span class="line">union all</span><br><span class="line">   SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as shjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;725&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE </span><br><span class="line">d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;725&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE </span><br><span class="line">d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;725&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">)as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, </span><br><span class="line">(SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;725&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND </span><br><span class="line">d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbj</span><br><span class="line">union all</span><br><span class="line">    SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as shjlsl FROM </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0126&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0126&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0126&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, </span><br><span class="line">    (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0126&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtsl</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as fzbj FROM </span><br><span class="line">    (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbh</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as fzsl FROM </span><br><span class="line">    (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4) in(&#39;0141&#39;,&#39;0148&#39;,&#39;0144&#39;,&#39;0145&#39;,&#39;0146&#39;,&#39;0147&#39;)) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no</span><br><span class="line">union all</span><br><span class="line">        SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as twhlbj FROM </span><br><span class="line">    (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;1&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">    d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">    ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbh</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as twhlsl FROM </span><br><span class="line">    (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0141&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no</span><br><span class="line">union all</span><br><span class="line">        SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as lyzqbj FROM </span><br><span class="line">    (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;19&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">    d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">    ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbh</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as lyzqsl FROM </span><br><span class="line">    (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0148&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no</span><br><span class="line">union all</span><br><span class="line">        SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as whzsbj FROM </span><br><span class="line">    (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;35&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">    d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">    ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbh</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as whzssl FROM </span><br><span class="line">    (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0144&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no</span><br><span class="line">union all</span><br><span class="line">        SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as xswbbj FROM </span><br><span class="line">    (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;47&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">    d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">    ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbh</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as xswbsl FROM </span><br><span class="line">    (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0145&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no</span><br><span class="line">union all</span><br><span class="line">        SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as zrsgbj FROM </span><br><span class="line">    (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;63&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">    d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">    ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbh</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as zrsgsl FROM </span><br><span class="line">    (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0146&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no</span><br><span class="line">union all</span><br><span class="line">        SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as fzqtbj FROM </span><br><span class="line">    (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;75&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">    d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">    ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbh</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as fzqtsl FROM </span><br><span class="line">    (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0147&#39;) as wjwf, </span><br><span class="line">    (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, </span><br><span class="line">    (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as qtbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl in (&#39;gwyf&#39;,&#39;fgf&#39;,&#39;jcgf&#39;,&#39;byzcf&#39;)) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbh</span><br><span class="line">union all</span><br><span class="line">    SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as qtsl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4) &#x3D;&#39;0151&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE </span><br><span class="line">d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)</span><br><span class="line">) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no</span><br></pre></td></tr></table></figure><p>解决方法创建表达式索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index i_issue_type_info_code14 on ods_jzw.issue_type_info(substr(issue_type_code, 1, 4))</span><br></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><h2 id="4-1索引部分"><a href="#4-1索引部分" class="headerlink" title="4.1索引部分"></a>4.1索引部分</h2><h3 id="影响使用索引的因素"><a href="#影响使用索引的因素" class="headerlink" title="影响使用索引的因素"></a>影响使用索引的因素</h3><ol><li>能否走索引，是操作符是否被对应的索引访问方法支持来决定的。</li><li>是否用索引是优化器决定的，如果走索引的成本低，可以走索引。或者使用了开关，禁止全表扫(大幅度增加全表扫描的代价，并不是真的禁用)，也可以走索引。</li></ol><h3 id="常见不走索引的情况"><a href="#常见不走索引的情况" class="headerlink" title="常见不走索引的情况"></a>常见不走索引的情况</h3><ol><li>数据类型不匹配</li><li>where子句进行表达式或函数操作</li><li>like的全模糊匹配(btree)</li><li>数据占比</li><li>长时间未进行表分析(vacuum analyze)，统计信息不准确</li></ol><h3 id="强调一下公司规范"><a href="#强调一下公司规范" class="headerlink" title="强调一下公司规范"></a>强调一下公司规范</h3><ul><li>所有逻辑外键需创建索引</li><li>多级子表应该包含所有上级表的主键    </li></ul><p><em>（如主表&lt;-子表关系：A&lt;-B&lt;-C，C要有B、A的逻辑外键，以此类推）</em></p><ul><li>表连接join条件用到的字段必须类型相同，避免隐式转换造成索引失效</li><li>书写规范禁用select *  </li></ul><h2 id="4-2-其他"><a href="#4-2-其他" class="headerlink" title="4.2 其他"></a>4.2 其他</h2><p>对性能的影响，设计〉SQL优化〉参数优化，设计阶段就要考虑性能。<br>减少查询联表的数量，简单的使用数据库。<br>SQL优化意识比技术更重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;一、理论部分&quot;&gt;&lt;a href=&quot;#一、理论部分&quot; class=&quot;headerlink&quot; title=&quot;一、理论部分&quot;&gt;&lt;/a&gt;一、理论部分&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;abase执行SQL语句时，首先通过语法分析模块（词法分析、语法分析(
      
    
    </summary>
    
    
    
      <category term="SQL优化" scheme="http://blog.loveyx815.cn/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
