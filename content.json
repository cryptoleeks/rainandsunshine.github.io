{"meta":{"title":"Hexo博客","subtitle":"","description":"","author":"Yonggang Shi","url":"http://blog.loveyx815.cn","root":"/"},"pages":[{"title":"","date":"2020-04-19T07:22:46.535Z","updated":"2020-04-08T02:56:22.242Z","comments":false,"path":"categories/index.html","permalink":"http://blog.loveyx815.cn/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-04-19T07:22:46.538Z","updated":"2020-04-08T02:55:48.126Z","comments":false,"path":"tags/index.html","permalink":"http://blog.loveyx815.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git命令大全","slug":"Git命令大全","date":"2020-04-19T07:42:49.025Z","updated":"2020-02-04T08:15:00.379Z","comments":true,"path":"2020/04/19/Git命令大全/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/19/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/","excerpt":"","text":"Git命令大全git config配置 Git 的相关参数。 Git 一共有3个配置文件： \\1. 仓库级的配置文件：在仓库的 .git/.gitconfig，该配置文件只对所在的仓库有效。 \\2. 全局配置文件：Mac 系统在 ~/.gitconfig，Windows 系统在 C:\\Users\\&lt;用户名&gt;\\.gitconfig。 \\3. 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 /usr/local/git）的 etc 文件夹中的 gitconfig。 123456789101112131415161718192021222324252627282930313233343536373839404142# 查看配置信息# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -l# 查看当前生效的配置信息$ git config -l# 编辑配置文件# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -e# 添加配置项# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;# 获取配置项$ git config &lt;--local | --global | --system&gt; --get &lt;name&gt;# 删除配置项$ git config &lt;--local | --global | --system&gt; --unset &lt;name&gt;# 配置提交记录中的用户信息$ git config --global user.name &lt;用户名&gt;$ git config --global user.email &lt;邮箱地址&gt;# 更改Git缓存区的大小# 如果提交的内容较大，默认缓存较小，提交会失败# 缓存大小单位：B，例如：524288000（500MB）$ git config --global http.postBuffer &lt;缓存大小&gt;# 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态$ git config --global color.ui true# 配置可以缓存密码，默认缓存时间15分钟$ git config --global credential.helper cache# 配置密码的缓存时间# 缓存时间单位：秒$ git config --global credential.helper 'cache --timeout=&lt;缓存时间&gt;'# 配置长期存储密码$ git config --global credential.helper store git clone从远程仓库克隆一个版本库到本地。 12345678# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下$ git clone &lt;远程仓库的网址&gt;# 指定本地仓库的目录$ git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt;# -b 指定要克隆的分支，默认是master分支$ git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt; git init初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。 12# 初始化本地仓库，在当前目录下生成 .git 文件夹$ git init git status查看本地仓库的状态。 1234567# 查看本地仓库的状态$ git status# 以简短模式查看本地仓库的状态# 会显示两列，第一列是文件的状态，第二列是对应的文件# 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中$ git status -s git remote操作远程库。 123456789101112131415161718# 列出已经存在的远程仓库$ git remote# 列出远程仓库的详细信息，在别名后面列出URL地址$ git remote -v$ git remote --verbose# 添加远程仓库$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;# 修改远程仓库的别名$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;# 删除指定名称的远程仓库$ git remote remove &lt;远程仓库的别名&gt;# 修改远程仓库的 URL 地址$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt; git branch操作 Git 的分支命令。 1234567891011121314151617181920# 列出本地的所有分支，当前所在分支以 \"*\" 标出$ git branch# 列出本地的所有分支并显示最后一次提交，当前所在分支以 \"*\" 标出$ git branch -v# 创建新分支，新的分支基于上一次提交建立$ git branch &lt;分支名&gt;# 修改分支名称# 如果不指定原分支名称则为当前所在分支$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 强制修改分支名称$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 删除指定的本地分支$ git branch -d &lt;分支名称&gt;# 强制删除指定的本地分支$ git branch -D &lt;分支名称&gt; git checkout检出命令，用于创建、切换分支等。 123456789101112# 切换到已存在的指定分支$ git checkout &lt;分支名称&gt;# 创建并切换到指定的分支，保留所有的提交记录# 等同于 \"git branch\" 和 \"git checkout\" 两个命令合并$ git checkout -b &lt;分支名称&gt;# 创建并切换到指定的分支，删除所有的提交记录$ git checkout --orphan &lt;分支名称&gt;# 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响$ git checkout &lt;文件路径&gt; git cherry-pick把已经提交的记录合并到当前分支。 12# 把已经提交的记录合并到当前分支$ git cherry-pick &lt;commit ID&gt; git add把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。 1234567891011121314# 把指定的文件添加到暂存区中$ git add &lt;文件路径&gt;# 添加所有修改、已删除的文件到暂存区中$ git add -u [&lt;文件路径&gt;]$ git add --update [&lt;文件路径&gt;]# 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录$ git add -A [&lt;文件路径&gt;]$ git add --all [&lt;文件路径&gt;]# 查看所有修改、已删除但没有提交的文件，进入一个子命令系统$ git add -i [&lt;文件路径&gt;]$ git add --interactive [&lt;文件路径&gt;] git commit将暂存区中的文件提交到本地仓库中。 123456789101112# 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息$ git commit# 把暂存区中的文件提交到本地仓库中并添加描述信息$ git commit -m \"&lt;提交的描述信息&gt;\"# 把所有修改、已删除的文件提交到本地仓库中# 不包括未被版本库跟踪的文件，等同于先调用了 \"git add -u\"$ git commit -a -m \"&lt;提交的描述信息&gt;\"# 修改上次提交的描述信息$ git commit --amend git fetch从远程仓库获取最新的版本到本地的 tmp 分支上。 12345# 将远程仓库所有分支的最新版本全部取回到本地$ git fetch &lt;远程仓库的别名&gt;# 将远程仓库指定分支的最新版本取回到本地$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; git merge合并分支。 12# 把指定的分支合并到当前所在的分支下$ git merge &lt;分支名称&gt; git diff比较版本之间的差异。 123456789101112131415161718# 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改$ git diff# 比较暂存区中的文件和上次提交时的差异$ git diff --cached$ git diff --staged# 比较当前文件和上次提交时的差异$ git diff HEAD# 查看从指定的版本之后改动的内容$ git diff &lt;commit ID&gt;# 比较两个分支之间的差异$ git diff &lt;分支名称&gt; &lt;分支名称&gt;# 查看两个分支分开后各自的改动内容$ git diff &lt;分支名称&gt;...&lt;分支名称&gt; git pull从远程仓库获取最新版本并合并到本地。 首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。 12# 从远程仓库获取最新版本。$ git pull git push把本地仓库的提交推送到远程仓库。 123456# 把本地仓库的分支推送到远程仓库的指定分支$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;# 删除指定的远程仓库的分支$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt; git log显示提交的记录。 12345678# 打印所有的提交记录$ git log# 打印从第一次提交到指定的提交的记录$ git log &lt;commit ID&gt;# 打印指定数量的最新提交的记录$ git log -&lt;指定的数量&gt; git reset还原提交记录。 12345678910111213141516# 重置暂存区，但文件不受影响# 相当于将用 \"git add\" 命令更新到暂存区的内容撤出暂存区，可以指定文件# 没有指定 commit ID 则默认为当前 HEAD$ git reset [&lt;文件路径&gt;]$ git reset --mixed [&lt;文件路径&gt;]# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改$ git reset &lt;commit ID&gt;$ git reset --mixed &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改# 相当于调用 \"git reset --mixed\" 命令后又做了一次 \"git add\"$ git reset --soft &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了$ git reset --hard &lt;commit ID&gt; git revert生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。 12# 生成一个新的提交来撤销某次提交$ git revert &lt;commit ID&gt; git tag操作标签的命令。 1234567891011121314151617181920212223# 打印所有的标签$ git tag# 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]# 添加带有描述信息的附注标签，可以指定之前的提交记录$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]# 切换到指定的标签$ git checkout &lt;标签名称&gt;# 查看标签的信息$ git show &lt;标签名称&gt;# 删除指定的标签$ git tag -d &lt;标签名称&gt;# 将指定的标签提交到远程仓库$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;# 将本地所有的标签全部提交到远程仓库$ git push &lt;远程仓库的别名&gt; –tags git mv重命名文件或者文件夹。 12# 重命名指定的文件或者文件夹$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt; git rm删除文件或者文件夹。 12345678# 移除跟踪指定的文件，并从本地仓库的文件夹中删除$ git rm &lt;文件路径&gt;# 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除$ git rm -r &lt;文件夹路径&gt;# 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件$ git rm --cached Git操作场景示例1. 删除掉本地不存在的远程分支多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 git branch --all 依然会显示该远程分支，可使用下列的命令进行删除： 123456# 使用 pull 命令，添加 -p 参数$ git pull -p# 等同于下面的命令$ git fetch -p$ git fetch --prune origin","categories":[],"tags":[]},{"title":"JVM复习","slug":"JVM复习","date":"2020-04-18T16:00:00.000Z","updated":"2020-04-19T07:46:41.738Z","comments":true,"path":"2020/04/19/JVM复习/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/19/JVM%E5%A4%8D%E4%B9%A0/","excerpt":"","text":"JVM复习 基于JDK1.7的研究 一、Java内存区域与内存溢出 上图为jdk1.7的内存模型，下图借用下别人的1.8的图 在这里插入图片描述 程序计数器 指示当前线程所执行的字节码的行号，编译字节码执行的命令，进而程序才能一步步的执行下去。 Java虚拟机栈 线程私有，生命周期与线程相同。 每个方法在执行时会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等。方法从调用到执行完成的过程中，就饿对应着一个栈帧在虚拟机栈中入栈到出栈的过程。 局部变量表：存放了编译期间各基本数据类型、对象引用和returnAddress类型。其所需要的内存空间在编译期间完成分配，所以在方法运行期间是不会改变局部变量表的大小。 本地方法栈 与虚拟机栈类似，不同的是本地方法栈是为jvm调用Native方法服务。 Java堆 线程共享，存放对象实例。堆可以存在在物理上不连续，只要逻辑上连续就行。（GC在后面讲） 方法区 线程共享，用于存储已被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据 运行时常量池 方法区的一部分，存放Class文件在编译期间生产的各种字面常量和符号引用。Java中并非预置在Class文件中的常量池才会被放入常量池区。在运行期间也可以将新的常量放入该区域，如String类的intern()方法 直接内存 我理解的是为了方便JVM在Java堆和Native堆中来回复制数据设置的缓冲区。直接内存并不是JVM运行时数据区的一部分，这是一种基于通道和缓冲区的I/O方式。可以通过一个存储子啊Java堆中DirectByteBuffer对象作为这块内存的引用进行操作。 二、对象的创建JVM接受到一个new的指令是，首先会去常量池中寻找该类的符号引用，然后检察这个符号引用代表的类是否已经加载、解析和初始化过。如果没有则先执行类加载过程。 空间划分 通过类接在的检查后，JVM为该对象分配内存（内存大小在类加载完后就确定了）。若Java堆的空间是规整连续的采用的分配算法是“指针碰撞”，直接移动与对象大小相同的距离指针分配内存。否则采用“空闲列表”分配，对于堆空间非连续的，用一张空闲记录表记录当前空闲的内存块，在为对象分配内存的时候，从空闲表中找到合适的空间进行分配，同时更新空闲表。 内存分配完后，JVM将分配到内存的空间全都初始化为零，最后再执行方法进行我们想要的初始化对象 对象的内存布局 在HotSpot虚拟机中，对象在内存中分为：对象头+实例数据+对齐填充。 对象头：包含了两部分信息，一部分用于存储对象自身的运行时数据（哈希吗、GC年龄代、锁状态、线程持有的锁等）；另一部分是类型指针，即对象指向他的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。若对象是个数组，对象头中还需有一块用于记录数组长度的数据。 实例数据：是对象真正存储的有效信息 对齐填充：对象的大小必须是8的整数倍，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。 三、内存分配与回收 大多数情况下，对象在新生代Eden区中分配，当Eden去没有足够的空间进行分配的时候虚拟机会进行MinorGC MinorGC：新生代GC，速度较快 FullGC/MajorGC：老年代GC，速度很慢 大对象直接进入老年代 -XX:PretenureSizeThreshold 令大于这个设置的值得对象直接进入老年代 ，Serial、ParNew有效。避免在新生代不停地复制 存活久的对象将进入老年代 对象计数器：对象在Eden区出生并经过第一次MinorGC后任然存活，移动进入Survivor空间，且对象年龄设置为1。对象在survivor区中每熬过一次MinorGC，年龄+1。当年龄增加到阈值（默认15），就进入老年代。 动态对象年龄判定 当Survivor空间中相同年龄所有对象大小&gt;Survivor/2大小，年龄&gt;=该年龄的对象就可以直接进入老年代，无需等到年龄阈值 空间分配担保 JDK 6 Update24之前： 在MinorGC之前，JVM会检查老年代的最大连续可用空间是否大于新生代所有对象空间。 大于：MinorGC是安全执行的 否则：JVM会去查看HandlePromotionFailure设置值是否允许担保失败。 ​ 允许：检查老年代最大可用的连续空间是否大于历次晋升老年代对象的平均大小 ​ 大于：尝试一次MinorGC ​ 否则：进行FullGC ​ 否则：进行FullGC JDK 6 Update24之后： 只要老年代的连续空间大于新生代对象总大小或历次晋升的平均大小就会MinorGC，否则将进行FullGC","categories":[{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"},{"name":"JVM","slug":"Java开发总结/JVM","permalink":"http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/JVM/"}],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://blog.loveyx815.cn/tags/JVM/"}]},{"title":"Java异常-受查与非受查","slug":"Java异常","date":"2020-04-18T16:00:00.000Z","updated":"2020-04-19T07:45:37.818Z","comments":true,"path":"2020/04/19/Java异常/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/19/Java%E5%BC%82%E5%B8%B8/","excerpt":"","text":"Java异常-受查与非受查 在这里插入图片描述 所有的异常都是由Throwable继承而来，下级分为Error和Exception Error Error表示Java运行时系统的内部错误和资源耗尽错误，不应该抛出该类型的错误，只能通知用户，尽力安全关闭程序。 Exception 该分支派生出RuntimeException和其他异常（如I/O错误之类） 受查与非受查异常 非受查异常 派生于Error或RuntimeException类的所有异常 受查异常 其他所有的异常称为受查异常 一个方法必须声明所有可能抛出的受查异常，非受查异常要么不可控制（Error），要么就应该避免（RuntimeException）。当方法没有声明所有可能发生的受查异常，编译器会发出一个错误消息。 try-catch除了常用的try-catch-finally之外，还有一种带资源的try语句 若资源属于一个实现了AutoCloseable接口的类，该接口有个close方法 void close() throws Exception;整体的带资源的try语句可写成如下代码： 123try(Resource res = ...)&#123; do something;&#125; 当try语句退出或者发生异常时，会自动调用res.close()，相当于调用了finally","categories":[{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"},{"name":"异常处理","slug":"异常处理","permalink":"http://blog.loveyx815.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"}]},{"title":"开发工作日常总结","slug":"开发工作日常总结（命令、快捷键）","date":"2020-04-18T16:00:00.000Z","updated":"2020-04-19T07:47:49.688Z","comments":true,"path":"2020/04/19/开发工作日常总结（命令、快捷键）/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/19/%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93%EF%BC%88%E5%91%BD%E4%BB%A4%E3%80%81%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%89/","excerpt":"","text":"开发工作日常总结IDE IDEA快捷键 key description note Ctrl + Shift + Enter 换行 Ctrl +X/Y 删除当前行 Ctrl +X本意为剪切，这里也可以子啊不选择中的状态下删除行 Linux SQLMAVEN打war包命令输入——-&gt; mvn install -DskipTests 或 mvn install -Dmaven.test.skip=true 打jar包命令输入——-&gt; mvn package -DskipTests 或 mvn package -Dmaven.test.skip=true JVM调优 参数 参数命令 作用 备注 -Xms 最小堆内存 -Xmx 最大堆内存 -Xmn 新生代分配的内存 -XX:+PrintGCDetails 打印GC日志 -XX:SurvivorRatio=8 新生代的Eden和survivor比例8：1 -XX:PretenureSizeThreshold 令大于这个设置的值得对象直接进入老年代 Serial、ParNew有效 jmap Java内存映像工具 jmap -dump:[live,]fromat=b,file=path pid 生成Java堆转储快照 jhat 堆转储快照分析工具 jhat path 分析dump文件，可以在浏览器查看分析结果（不推荐） jstack Java堆栈跟踪工具 jstack [option] pid option: -F -l -m,强制输出堆栈信息，显示关于锁的附加信息，显示native方法信息","categories":[{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"},{"name":"快捷键","slug":"快捷键","permalink":"http://blog.loveyx815.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"常用命令","slug":"常用命令","permalink":"http://blog.loveyx815.cn/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"}]},{"title":"RocketMQ消息队列-初识","slug":"mq/RocketMQ消息队列","date":"2020-04-18T16:00:00.000Z","updated":"2020-04-19T07:49:10.833Z","comments":true,"path":"2020/04/19/mq/RocketMQ消息队列/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/19/mq/RocketMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/","excerpt":"","text":"RocketMQ消息队列[TOC] 简介：RocketMQ具有灵活的扩展性、海量消息堆积能力、支持顺序消息、支持多种消息过滤方式、支持事务消息、支持回溯消费。 四大核心组件：NameServer、Broker、Producer、Consumer，每个组件都可以部署成集群模式进行水平扩展。 Producer 生产者负责生产消息，Rocketmq提供了同步、异步、单向三种方式发送消息。 Consumer 消费者负责消费消息，从消息服务器拉取消息并将其输入用户应用程序。 Broker 消息服务器是消息存储中心，主要用于接收生产者的消息进行存储，消费者从这里获取消息。并且还存储与消息有关的元数据（包括用户组、消费进度偏移量、队列信息等） NameServer 名称服务器用来保存Broker相关元信息并给生产者和消费者查找Broker信息。 1.环境搭建（1） 从官网下载RocketMQ服务包 ,将其解压至服务器目录 1580280760569 ，启动nameserver和broker服务（需要安装好JDK环境，没装的话先移步安装JDK）。 （2） 12#后台启动nameservernohup sh bin/mqnamesrv &amp; 观察启动目录下的nohup.out日志文件，是否启动成功！ 这里我使用的是默认的配置环境进行启动，结果报错了，日志显示如下 12345678Java HotSpot(TM) 64-Bit Server VM warning: Using the DefNew young collector with the CMS collector is deprecated and will likely be removed in a future releaseJava HotSpot(TM) 64-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and will likely be removed in a future release.Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error='Cannot allocate memory' (errno=12)## There is insufficient memory for the Java Runtime Environment to continue.# Native memory allocation (mmap) failed to map 2147483648 bytes for committing reserved memory.# An error report file with more information is saved as:# /home/rocketmq-all-4.6.0-bin-release/bin/hs_err_pid7597.log 说是内存分配不足。 解决方案：查看mqnamesrv脚本，最后运行了runserver.sh，所以我们修改runserver.sh这个脚本的运行空间，找到JAVA_OPT这一行，修改成 1JAVA_OPT=\"$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx128m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\" 内存大小可根据实际情况设定。 （3） 12#后台启动brokernohup sh bin/mqborker -n ip:9876 &amp; 观察启动目录下的nohup.out日志文件，是否启动成功！ 我这里日志显示内存不够失败，参考（2）中的解决方案，修改runbroker.sh的运行内存参数，再查看日志文件，启动成功！ 2.实现生产者和消费者 这里采用推送型消费模式进行消息消费，需要在消费者启动的过程中注册一个消息监听器，监听订阅消息的获取。 消费者： 12345678910111213141516171819202122232425262728293031323334353637383940public class Consumer &#123; public static void main(String[] args) throws Exception&#123; //创建一个消费者，帮你设置一个消费者组 DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"shi_consumer_group\"); //指定nameserver 地址 consumer.setNamesrvAddr(\"ip:9876\"); //设置consumer第一次启动时从队列首或尾开始消费 consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET); //订阅指定Topic下的所有消息 consumer.subscribe(\"topic_example_java\",\"*\"); //注册消息监听器 consumer.registerMessageListener( new MessageListenerConcurrently()&#123; @Override public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext) &#123; //默认list里只有一条消息，可以通过设置参数来批量接受消息 if (list != null)&#123; for (MessageExt ext:list)&#123; try &#123; System.out.println(new Date()+new String(ext.getBody(),\"UTF-8\")); &#125;catch (UnsupportedEncodingException e)&#123; e.printStackTrace(); &#125; &#125; &#125; else &#123; System.out.println(\"么有监听到消息。。。\"); &#125; return ConsumeConcurrentlyStatus.CONSUME_SUCCESS; &#125; &#125; ); //消费者对象在使用之前必须要调用start方法初始化 consumer.start(); System.out.println(\" Consumer started...\"); &#125;&#125; 消息生产者： 1234567891011121314151617181920212223242526272829public class Producer &#123; public static void main(String[] args) throws MQClientException, UnsupportedEncodingException, RemotingException, InterruptedException, MQBrokerException &#123; //创建一个消息生产者，并设置一个消息生产组 DefaultMQProducer producer =new DefaultMQProducer(\"shi_producer_group\"); //指定nameSERVER地址 producer.setNamesrvAddr(\"ip:9876\"); //初始化producer，在整个生命周期中只需要初始化一次 producer.start(); for (int i =0 ;i&lt;100;i++)&#123; //创建一个消息对象，指定其主题、标签、消息内容 Message message = new Message( \"topic_example_java\", //消息主题 \"TagA\",//消息标签 (\"Hello Java demo rocketMQ\"+i).getBytes(RemotingHelper.DEFAULT_CHARSET)//消息内容 ); //发送消息并返回结果 SendResult sendResult = producer.send(message); System.out.printf(\"%s%n\",sendResult); &#125; //一旦生产者实例不再被使用，则将其关闭，包括清理资源、关闭网络连接等 producer.shutdown(); &#125;&#125; 分别启动消费者和生产者，生产者发布携带topic的消息，消费者去订阅该topic，通过监听，即可获取消息。 1580363958517 生产者生产的100条消息已经被消费了 通过rocketmq-console可视化界面可以看到消费信息已产生 1580364346073 这里提下rocketmq-console是rocketmq官方开源的控制台项目，可以监测mq运行情况。可以通过rocketmq官方的github的release-rocketmq-console-1.0.0分支获取该源码。 这里有个地方需要注意，很多资料上写的都是本机配置rocketmq，所以他们启动的都是localhost:9876这个broker，包括在代码中生产者、消费者制定nameserver地址也是localhost:9876。 使用云服务器部署mq的或者想使用虚拟机ip的需要注意了： 如若启动了mqnamesrv和mqbroker这两个服务，先杀掉。然后修改rocketmq解压目录下conf/broker.conf，新增个brokerIP1=你的服务器公网ip 。 启动mqnamesrv和mqbroker 1234#启动mqnamesrvnohup sh bin/mqnamesrv &amp;#启动mqbroker，-c可以自定义配置文件启动，这里使用上面修改conf/borker.confnohup sh bin/mqbroker -n localhost:9876 -c conf/broker.conf 服务器防火墙放行9876和10911端口，云服务器设置安全组规则，同样放行9876和10911（画重点，血的教训） 1580365573265 之前不知道为什么就设置了10909端口，后来消息可以生产但无法消费。一直以为自己的端口都放开了，弄了半天发现还是端口没放开。。。 3.基于Aop托管的实现 把生产者和消费者的实例放入spring bean中，利用Aop进行管理，方便调用 新建生产者、消费者和监听器bean. 生产者bean 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * @Auther: Yonggang Shi * @Date: 2020/01/30 15:52 * @Description: spring IoC实现生产者 */public class SpringProducer &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); private String producerGroupName; private String nameServerAddr; private DefaultMQProducer producer; public SpringProducer(String producerGroupName, String nameServerAddr) &#123; this.producerGroupName = producerGroupName; this.nameServerAddr = nameServerAddr; &#125; public void init() throws Exception &#123; logger.info(\"开始启动消息生产者服务。。。\"); //创建一个消息生产者，并设置一个消息生产者组 producer = new DefaultMQProducer(producerGroupName); //指定nameserver地址 producer.setNamesrvAddr(nameServerAddr); producer.start(); logger.info(\"消息生产者服务启动成功。\"); &#125;/* * @Description: 销毁对象 * @Param: [] * @Return: void * @Author: Yonggang Shi * @Date: 2020/1/30/030 下午 4:28 */ public void destroy() &#123; logger.info(\"开始关闭消息生产者服务。。\"); producer.shutdown(); logger.info(\"消息生产者服务已关闭\"); &#125; public DefaultMQProducer getProducer()&#123; return producer; &#125;&#125; 消费者bean 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/** * @Auther: Yonggang Shi * @Date: 2020/01/30 16:29 * @Description: */public class SpringCousumer &#123; private Logger logger =LoggerFactory.getLogger(this.getClass()); private String consumerGroupName; private String nameServerAddr; private String topicName; private DefaultMQPushConsumer consumer; private MessageListenerConcurrently messageListenerConcurrently; public SpringCousumer(String consumerGroupName,String nameServerAddr,String topicName,MessageListenerConcurrently messageListener)&#123; this.consumerGroupName=consumerGroupName; this.nameServerAddr=nameServerAddr; this.topicName=topicName; this.messageListenerConcurrently=messageListener; &#125; public void init() throws Exception&#123; logger.info(\"开始启动消费者服务。。\"); consumer=new DefaultMQPushConsumer(consumerGroupName); consumer.setNamesrvAddr(nameServerAddr); consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET); consumer.subscribe(topicName,\"*\"); consumer.registerMessageListener(messageListenerConcurrently); consumer.start(); logger.info(\"消费者服务已启动。。。\"); &#125; public void destory()&#123; logger.info(\"开始关闭消息者服务。。。\"); consumer.shutdown(); logger.info(\"消费者服务已关闭！\"); &#125; public DefaultMQPushConsumer getConsumer()&#123; return consumer; &#125;&#125; 消息监听器bean 123456789101112131415161718192021222324/** * @Auther: Yonggang Shi * @Date: 2020/01/30 17:11 * @Description: 消息监听逻辑 */public class MessageListener implements MessageListenerConcurrently &#123; private Logger logger =LoggerFactory.getLogger(this.getClass()); @Override public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext) &#123; if (list!=null)&#123; for (MessageExt ext : list)&#123; try &#123; logger.info(\"监听到消息：\"+new String(ext.getBody(),\"UTF-8\")); &#125;catch (UnsupportedEncodingException e)&#123; logger.info(\"解码异常\"+e); &#125; &#125; &#125; return ConsumeConcurrentlyStatus.CONSUME_SUCCESS; &#125;&#125; 由于本项目是基于springboot开发，这里直接新建个config配置类，注入上面建的bean 注意：下面的nameserver的ip需改成自己实际环境的ip 12345678910111213141516171819202122232425262728293031323334353637/** * @Auther: Yonggang Shi * @Date: 2020/01/30 17:26 * @Description: 消息生产者实例配置 */@Configurationpublic class ConfigBean &#123; @Autowired private ApplicationContext applicationContext; /* * @Description: 生产者实例化 * @Param: [] * @Return: cn.loveyx815.rocketmq.spring.SpringProducer * @Author: Yonggang Shi * @Date: 2020/1/30/030 下午 5:35 */ @Bean(initMethod = \"init\",destroyMethod = \"destroy\") public SpringProducer getProducer()&#123; return new SpringProducer(\"spring_producer_group\",\"ip:9876\"); &#125; @Bean(name = \"messageListener\") public MessageListener messageListener()&#123; return new MessageListener(); &#125; @Bean(initMethod = \"init\",destroyMethod = \"destory\") public SpringCousumer getCousumer()&#123; //ApplicationContext context = return new SpringCousumer(\"spring_producer_group\",\"ip:9876\",\"spring-rocketMQ-topic\",messageListener()); &#125;&#125; 到此为止，准备工作都已完成，现在写两个单元测试进行验证下代码是否有问题 1234567891011121314151617181920/** * @Auther: Yonggang Shi * @Date: 2020/01/31 14:45 * @Description: 消费者单测 */@SpringBootTestpublic class SpringConsumerTest &#123; @Autowired private SpringCousumer cousumer; @Test public void consume() throws Exception &#123; Thread.sleep(1000*200); cousumer.getConsumer().shutdown(); &#125;&#125; 123456789101112131415161718192021222324252627282930/** * @Auther: Yonggang Shi * @Date: 2020/01/31 14:44 * @Description: 生产者单测 */@SpringBootTestpublic class SpringProducerTest &#123; @Autowired private SpringProducer producer; @Test public void sendMessage() throws Exception&#123; for (int i =0;i&lt;20;i++)&#123; Message message = new Message( \"spring-rocketMQ-topic\", null, (\"spring-RocketMQ-demo\"+i).getBytes(RemotingHelper.DEFAULT_CHARSET) ); SendResult sendResult = producer.getProducer().send(message); System.out.printf(\"%s%n\",sendResult); &#125; &#125;&#125; 最后启动两个test，得到输出信息 4.消息顺序处理 在业务中可能需要按照顺序消费的场景，而RocketMQ本身就支持这种顺序消费。 如电商系统中订单产生-加入购物车-将下单消息写入消息队列-用户取消-将取消订购的消息加入消息队列-从队列中消费订购消息-从队列中消费取消订购消息-往数据库中写入订购消息-从数据库中删除订购消息，在最后写入数据库和从数据库删除操作时，必须按照消息顺序执行，否则就会发生取消操作失败。 实际上与之前的生产消费类似，下面仅介绍下需要注意的地方。 消息生产者bean注入的时候，需要实例化一个消息队列选择器（MessageQueueSelector），新建个选择器类实现MessageQueueSelector这个接口，自定义消息存储的规则，那些消息会进入同一个队列。实际调用生产者发送消息的时候send()，传入新建消息选择器的对象和对应消息和参数 123public SendResult send(Message msg, MessageQueueSelector selector, Object arg) throws MQClientException, RemotingException, MQBrokerException, InterruptedException &#123; return this.defaultMQProducerImpl.send(msg, selector, arg); &#125; 通过实现这个重载方法来进入消息队列 消费者bean注入不同的是，消息监听器的实现接口不同，原来是用MessageListenerConcurrently，这种消息消费是无序的，所以我们想要有序的需实现MessageListenerOrderly","categories":[{"name":"MQ","slug":"MQ","permalink":"http://blog.loveyx815.cn/categories/MQ/"}],"tags":[{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"},{"name":"MQ","slug":"MQ","permalink":"http://blog.loveyx815.cn/tags/MQ/"},{"name":"分布式","slug":"分布式","permalink":"http://blog.loveyx815.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"}]},{"title":"设计模式-观察者模式","slug":"设计模式/设计模式-观察者模式","date":"2020-04-18T16:00:00.000Z","updated":"2020-04-19T08:56:00.576Z","comments":true,"path":"2020/04/19/设计模式/设计模式-观察者模式/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"设计模式-观察者模式 观察者模式定义了对象之间的一对多依赖，当一个对象改变状态时，他的所有依赖者都会收到通知并自动更新 1. 场景描述 通过气象站监测的数据，对外界进行公告展示。也就是气象站统计好数据后，确认修改完，公告那边也会收到改变后的数据。 2. 系统设计 首先定义两个接口，Subject主题和Observer观察者 123456//主题接口public interface Subject &#123; void registerObserver(Observer o); void removeObserver(Observer o); void notifyObservers();&#125; 1234//观察者接口public interface Observer &#123; void update(float temp , float humidity , float pressure);&#125; 这里的Subject是和Observer有关联的，因为需要在Subject的实现中去通知Observer Subject的实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/** * @Auther: Yonggang Shi * @Date: 2020/04/17 17:27 * @Description: 主体实现发布通知对应观察者 */public class WeatherData implements Subject &#123; private ArrayList observers; private float temperature; private float humidtiy; private float pressure; public WeatherData() &#123; observers = new ArrayList(); &#125; @Override public void registerObserver(Observer o) &#123; observers.add(o); &#125; @Override public void removeObserver(Observer o) &#123; observers.remove(o); &#125; /** * 通过遍历当前已注册的观察者对象，实现数据通信，让观察者进行更新展示 * @param * @return void * @author shiyonggang * @creed: Talk is cheap,show me the code * @date 2020/4/18/018 下午 3:27 */ @Override public void notifyObservers() &#123; for (int i =0 ;i&lt;observers.size();i++)&#123; Observer observer = (Observer) observers.get(i); observer.update(temperature,humidtiy,pressure); &#125; &#125; public void measurementsChanged()&#123; notifyObservers(); &#125; public void setMeasurements(float temperature,float humidtiy,float pressure)&#123; this.temperature = temperature; this.humidtiy = humidtiy ; this.pressure = pressure; measurementsChanged(); &#125;&#125; 对成功加入Subject的观察者进行统一更新，收集数据通过setMeasurements 收集，最终把收集的数据再发送给所有观察者对象。 观察者具体实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * @Auther: Yonggang Shi * @Date: 2020/04/18 01:17 * @Description: 观察者具体实现 */public class CurrentConditionDisplay implements Observer,DisplayElement &#123; private float temperature; private float humidity; private Subject weatherData; /** * 通过构造函数的Subject对当前对象进行注册观察者操作 * @param weatherData Subject 主题对象 * @return * @author shiyonggang * @creed: Talk is cheap,show me the code * @date 2020/4/18/018 下午 3:35 */ public CurrentConditionDisplay(Subject weatherData) &#123; this.weatherData = weatherData; weatherData.registerObserver(this); &#125; @Override public void display() &#123; System.out.println(\"Current conditions:\"+temperature+\"F degrees and \"+humidity+\"% humidity\"); &#125; /** * 在数据更新之后进行展示操作 * @param temp 温度 * @param humidity 湿度 * @param pressure 压力 * @return void * @author shiyonggang * @creed: Talk is cheap,show me the code * @date 2020/4/18/018 下午 3:37 */ @Override public void update(float temp, float humidity, float pressure) &#123; this.temperature = temp; this.humidity = humidity; display(); &#125;&#125; 这里的构造方法中引用了Subject的实现，这样是为了把当前这个观察者对象注册到对应的Subject中，也就是Observer的实现会依赖Subject。上面的Subject也有依赖Observer他的关系，通过接口的方式对两者依赖关系进行松耦合。 通过气象工作站进行收集更新 12345678910public class WeatherStation &#123; public static void main(String[] args)&#123; WeatherData weatherData =new WeatherData(); CurrentConditionDisplay currentConditionDisplay =new CurrentConditionDisplay(weatherData); weatherData.setMeasurements(11,12,13); &#125;&#125; 结果如下： 收集完数据之后，便通知了我们已注册进Subject的Observer。","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://blog.loveyx815.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://blog.loveyx815.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"RocketMQ消息队列-分布式事务","slug":"mq/RocketMQ消息队列之分布式事务","date":"2020-04-18T16:00:00.000Z","updated":"2020-04-19T07:49:42.624Z","comments":true,"path":"2020/04/19/mq/RocketMQ消息队列之分布式事务/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/19/mq/RocketMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/","excerpt":"","text":"RocketMQ消息队列[TOC] 基于RocketMQ的分布式事务 在介绍RocketMQ的分布式事务之前，先来了解下什么事分布式事务？ 一、分布式事务 简介 在分布式系统中，不止使用一个数据库，比如订单系统使用db_order数据库，产品系统使用的是db_product数据库，在订单系统中只能保证订单相关操作的事务，在产品系统中只能保证产品相关操作的事务。比如：如果在订单系统中进行生成订单、扣减库存的业务，如果出现异常，那么创建订单的事务会回滚，而扣减库存的事务则不会，因为本地事务是不能夸数据库的。跨库的事务就属于分布式事务。 把分布式系统中两个相关操作看成是一个单元，比如创建订单和修改库存的操作，该单元要么一起成功，要么一起失败，这就是分布式事务。 关于分布式事务你不得不知的两个理论： 1、CAP定理CAP原则又称CAP定理，指的是在一个分布式系统中，WEB服务无法同时满足以下3个特性： 一致性(Consistency) ： 在分布式系统中数据一旦更新，所有数据变动都是同步的 可用性(Availability) ： 好的响应性能，每个操作都必须有预期的响应结束 分区容错性(Partition tolerance) ： 在网络分区的情况下，即使出现单个节点无法可用，系统依然正常对外提供服务 首先在分布式系统中，横向扩展策略依赖于数据分区，所以一般会在一致性和可用性上做出牺牲。 2、BASE理论BASE理论中的三个特性： Basically Available（基本可用） Soft state（软状态） Eventually consistent（最终一致性） 三个特性分别指的是： （1）基本可用是指分布式系统在出现不可预知的故障的时候，允许损失部分可用性——但请注意，这绝不等价于系统不可用。 （2）软状态，和硬状态对应，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统不同节点的数据副本之间进行数据同步的过程存在延时。 （3）最终一致性强调的是系统所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要试试保证系统数据的强一致性。 BASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consist ency）。————————————————版权声明：本文为CSDN博主「坏菠萝」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/abcwanglinyong/article/details/82116669 二、分布式事务解决方案 分布式事务解决方案有很多种，这里针对RocketMQ本身介绍下两阶段提交（2PC）。因为本身RocketMQ的分布式事务消息就是基于消息中间件模拟的两阶段提价（2PC）。 主要分为以下几个步骤 系统A先向消息中间件发送一条预备消息，消息中间件保存还该消息后向系统A发送确认消息 系统A接收到MQ的确认消息后，执行本地事务 系统A根据本地事务执行结果再向MQ发送提交信息，以提交二次确认 MQ收到二次确认消息后，不预备消息标记为可投递，订阅者最终讲接收到该消息 在这过程中是如何进行回滚操作？ 在本地事务未执行之前，也就是上面的1和2出错的话，不会进入后面的阶段，也就不会有问题 第3步出错系统A会实现一个消息回查接口，MQ服务端在等不到系统A反馈时会轮询该消息回查接口，检查系统A的本地事务执行结果。如果事务成功执行则进入下个阶段，否则回滚到第一步中。 第4布出错，此时系统A的本地事务已经提交成功，MQ服务端通过回查接口能够检查到该事务执行成功，那么由MQ服务端将预备消息标记为可投递，从而完成消息事务的处理。 至此可实现跨系统是分布式事务了。 整体的分布式事务被拆分成一个消息事务（系统A的本地事务+发消息）+系统B的本地事务，系统B的操作由消息驱动，这样系统A和系统B的事务便绑定在一起。 RocketMQ整体交互流程图如下： 事务发起方首先发送准本预备消息到MQServer MQServer向事务发起方ACK确认消息发送成功 事务发起方接收到确认消息后执行事务 事务发起方根据本地事务的执行结果返回commit或rollback给MQserver。如果发送的是rollback，则MQ将删除该预备消息不进行下发；否则MQ会把该预备消息发送给Consumer 如果在执行本地事务过程中该应用挂了或者超时，第4步提交的二次确认消息最终没有到达MQServer，MQServer将在经过一定时间后对该消息发起消息回查，通过不停的询问同组的其他的Producer来获取状态 发送方接受到回查消息后查询对应消息的本地事务执行结果 根据回查的本地事务的最终执行结果再次提交二次确认 消费端的消息成功机制是由MQ保证的 三、RocketMQ事务消息实例建议大家使用MQ的时候要选择MQ版本4.3以上的，而且pom文件引入的rocketmq-client版本号要与你服务器上的版本号一致，否则可能会出现No route info of this topic这样的异常信息，被这个坑惨了 事务消息生产者 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/** * @Auther: Yonggang Shi * @Date: 2020/02/03 17:11 * @Description: */public class TransactionProducer &#123; private static Logger logger = LoggerFactory.getLogger(TransactionProducer.class); public static void main(String[] args) throws Exception &#123; TransactionMQProducer producer = new TransactionMQProducer(\"transaction_producer_group\"); producer.setNamesrvAddr(Consts.MQ_ADDR); ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;&gt;(2000), (Runnable r) -&gt; &#123; Thread thread = new Thread(r); thread.setName(\"client-transaction-msg-check-thread\"); return thread; &#125;); //设置本地事务执行的线程池 producer.setExecutorService(executorService); producer.setTransactionListener(new TransactionListener() &#123; @Override public LocalTransactionState executeLocalTransaction(Message message, Object o) &#123; //本地事务处理逻辑 logger.info(\"本地事务执行。。。\"); logger.info(\"消息标签：\"+new String(message.getTags())); logger.info(\"消息内容：\"+new String(message.getBody())); String tag = message.getTags(); if (tag.equals(\"Transaction1\"))&#123; //消息的标签如果是Transaction1,则返回事务失败标记 logger.error(\"模拟本地事务执行失败\"); return LocalTransactionState.ROLLBACK_MESSAGE; &#125; logger.info(\"模拟本地事务成功\"); return LocalTransactionState.COMMIT_MESSAGE; &#125; @Override public LocalTransactionState checkLocalTransaction(MessageExt messageExt) &#123; //消息回查接口 logger.info(\"服务器调用消息回查接口\"); logger.info(\"消息标签：\"+new String(messageExt.getTags())); logger.info(\"消息内容：\"+new String(messageExt.getBody())); return LocalTransactionState.COMMIT_MESSAGE; &#125; &#125;); producer.start(); for (int i =0 ;i&lt;2;i++)&#123; Message message=new Message(\"TopicTransaction\",\"Transaction\"+i,(\"Hello Rocakmq transaction\").getBytes()); SendResult sendResult =producer.sendMessageInTransaction(message,null); logger.info(String.valueOf(sendResult)); logger.info(\"\"); TimeUnit.MICROSECONDS.sleep(10); &#125; for (int i =0 ;i&lt;100;i++)&#123; Thread.sleep(1000); &#125; producer.shutdown(); &#125;&#125; 与普通生产者不同的地方是，这里需要调用setTransactionListener方法，通过自己实现TransactionListener接口的executeLocalTransaction执行本地事务和checkLocalTransaction消息回查方法 执行结果说明有个事务消息挂了，实际上发送过去的就只有一条 事务消息消费者 1234567891011121314151617181920212223242526272829303132333435363738/** * @Auther: Yonggang Shi * @Date: 2020/02/03 22:11 * @Description: */public class TransactionConsumer &#123; private static Logger logger = LoggerFactory.getLogger(TransactionConsumer.class); public static void main(String[] args) throws MQClientException &#123; DefaultMQPushConsumer consumer =new DefaultMQPushConsumer(\"transaction_consumer_group\"); consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET); consumer.setNamesrvAddr(Consts.MQ_ADDR); consumer.subscribe(\"TopicTransaction\",\"*\"); consumer.registerMessageListener(new MessageListenerConcurrently() &#123; private Random random = new Random(); @Override public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext) &#123; for (MessageExt msg: list) &#123; logger.info(\"消息消费者接收到消息\"+msg); logger.info(\"接收到的消息标签：\"+new String(msg.getTags())); logger.info(\"接收到消息内容：\"+new String(msg.getBody())); &#125; try &#123; //模拟业务处理 TimeUnit.SECONDS.sleep(random.nextInt(5)); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); return ConsumeConcurrentlyStatus.RECONSUME_LATER; &#125; return ConsumeConcurrentlyStatus.CONSUME_SUCCESS; &#125; &#125;); consumer.start(); &#125;&#125; 执行事务消息消费者，仅消费了Transaction0，说明本地事务消息失败的没有被发过来 四、分布式事务实现新用户注册送积分 背景介绍：新用户注册赠送积分。这里的流程就是把用户表格积分表分别放在不同的库，实现两者的跨库事务操作。 这里我们主要介绍下核心代码，完整的源码可以follow我的大型仓库 https://github.com/rainandsunshine/Poet.git 下面分为两块，一个是配置双数据源，单个数据源不能实现跨库操作；二是RocketMQ的分布式事务在具体业务中如何实现。 配置双数据源，也就是一个系统里面连接两个库。这个项目使用的是JdbcTemplate作为持久层的开发，在SpringBoot中直接新建个配置类，给数据源都绑定好。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/** * @Auther: Yonggang Shi * @Date: 2020/02/04 22:58 * @Description: 双数据源配置 */@Configurationpublic class DataSourceConfig &#123; @Bean(name = \"testDataSource\") @Primary @Qualifier(\"testDataSource\") @ConfigurationProperties(prefix=\"spring.datasource.hikari.mysql\") public DataSource testDataSource() &#123; return DataSourceBuilder.create().build(); &#125; @Bean(name = \"formalDataSource\") @Qualifier(\"formalDataSource\") @ConfigurationProperties(prefix = \"spring.datasource.formal.mysql\") public DataSource formalDataSource() &#123; return DataSourceBuilder.create().build(); &#125; @Bean(name=\"testJdbcTemplate\") public JdbcTemplate testJdbcTemplate ( @Qualifier(\"testDataSource\") DataSource testDataSource ) &#123; return new JdbcTemplate(testDataSource); &#125; @Bean(name = \"formalJdbcTemplate\") public JdbcTemplate formalJdbcTemplate( @Qualifier(\"formalDataSource\") DataSource formalDataSource)&#123; return new JdbcTemplate(formalDataSource); &#125; /* * @Description:用户DAO层bean， 通过参数注入对应的jdbctemplate，实现对库绑定 * @Param: [jdbcTemplate] * @Return: cn.loveyx815.rocketmq.mqtransaction.dao.UserDao * @Author: Yonggang Shi * @Date: 2020/2/5/005 下午 11:57 */ @Bean(name=\"userDao\") public UserDao getUserDao(@Qualifier(\"testJdbcTemplate\") JdbcTemplate jdbcTemplate)&#123; UserDao userDao =new UserDao(); userDao.setJdbcTemplate(jdbcTemplate); return userDao; &#125; /* * @Description:积分DAO层bean， 通过参数注入对应的jdbctemplate，实现对库绑定 * @Param: [jdbcTemplate] * @Return: cn.loveyx815.rocketmq.mqtransaction.dao.UserDao * @Author: Yonggang Shi * @Date: 2020/2/5/005 下午 11:57 */ @Bean(name=\"pointDao\") public PointDao getPointDao(@Qualifier(\"formalJdbcTemplate\") JdbcTemplate jdbcTemplate)&#123; PointDao pointDao =new PointDao(); pointDao.setJdbcTemplate(jdbcTemplate); return pointDao; &#125;&#125; 配置多数据源一定有个主要的数据源，不然程序加载就不能识别默认的，导致报错。@Primary注解加在你想加的DataSource上。 先注入两个DataSource的bean后，再分别注入JdbcTemplate中，最后把持久层的userDAO和pointDAO分贝注入不同的Jdbctemplate的bean，这样就可以实现多数经验绑定了。 下面就是介绍事务消息生产者和消费者 除了那些基本的配置之外，主要的是在事务消息可以实现分布式事务，基于2PC(二阶段提交)前文已经介绍过了。 特别的地方就是在消息生产者生产的时候需要添加个本地事务监听器，用来监听本地事务执行状态，然后再发送消息。 而消费者也需要自己实现MessageListenerConcurrently接口的方法，可以在消费消息的时候做一些业务处理 消息监听器TransactionMessageListener 123456789101112131415161718192021222324252627282930313233343536/** * @Auther: Yonggang Shi * @Date: 2020/02/04 18:50 * @Description: 事务消息监听器，用作消费者消费的监听逻辑实现 */@Componentpublic class TransactionMessageListener implements MessageListenerConcurrently &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @Resource private PointService pointService; @Override public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext) &#123; try &#123; for (MessageExt message:list)&#123; logger.info(\"消息消费者接收到消息:\"+message); logger.info(\"接收到消息内容:\"+new String (message.getBody())); //从消息体中获取积分消息对象 UserPointMessage userPointMessage= JSON.parseObject(message.getBody(),UserPointMessage.class); if (userPointMessage!=null)&#123; Point point = new Point(); point.setUserId(userPointMessage.getUserId()); point.setAmount(userPointMessage.getAmount()); //保存用户积分记录并提交本地事务 pointService.savePoint(point); &#125; &#125; &#125;catch (Exception e)&#123; logger.error(\"消息消费出错\"+e); return ConsumeConcurrentlyStatus.RECONSUME_LATER; &#125; //正常消费成功 return ConsumeConcurrentlyStatus.CONSUME_SUCCESS; &#125;&#125; 本地事务监听器UserLocalTransactionListener 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * @Auther: Yonggang Shi * @Date: 2020/02/04 18:25 * @Description: 本地事务监听器，用作生产者生产消息的逻辑 */@Componentpublic class UserLocalTransactionListener implements TransactionListener &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @Autowired private UserService userService; @Override public LocalTransactionState executeLocalTransaction(Message message, Object o) &#123; //本地事务处理逻辑 logger.info(\"本地事务执行。。。\"); logger.info(\"消息标签：\"+new String(message.getTags())); logger.info(\"消息内容：\"+new String(message.getBody())); //从消息体重获取积分消息对象 UserPointMessage userPointMessage = JSON.parseObject(message.getBody(), UserPointMessage.class); //保存用户记录并提交本地事务 userService.saveUser(userPointMessage.getUserId(),userPointMessage.getUserName()); return LocalTransactionState.COMMIT_MESSAGE; &#125; @Override public LocalTransactionState checkLocalTransaction(MessageExt messageExt) &#123; //消息回查接口 logger.info(\"服务器调用消息回查接口\"); logger.info(\"消息标签：\"+new String(messageExt.getTags())); logger.info(\"消息内容：\"+new String(messageExt.getBody())); //从消息体重获取积分消息对象 UserPointMessage userPointMessage = JSON.parseObject(messageExt.getBody(),UserPointMessage.class); if (userPointMessage!= null)&#123; String userId = userPointMessage.getUserId(); if (userService.getById(userId) != null)&#123; logger.info(\"本地插入用户表成功！\");// 表示本地事务执行成功 return LocalTransactionState.COMMIT_MESSAGE; &#125; &#125; return LocalTransactionState.ROLLBACK_MESSAGE; &#125;&#125; 通过使用@Component注解来标识这两个监听器注入Spring容器，然后在生产者、消费者配置类中分别引用这两个监听器bean。 生产者 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * @Auther: Yonggang Shi * @Date: 2020/02/04 17:55 * @Description: 消息生产者 */public class TransactionSpringProducer &#123; private Logger logger = LoggerFactory.getLogger(getClass()); private String producerGroupName; private String nameServerAdd; private int corePoolSize = 1; private int maximumPoolSize = 5; private long keepAliveTime = 100; private TransactionMQProducer producer; private TransactionListener transactionListener; public TransactionSpringProducer(String producerGroupName,String nameServerAdd,int corePoolSize,int maximumPoolSize,long keepAliveTime,TransactionListener transactionListener)&#123; this.corePoolSize=corePoolSize; this.keepAliveTime=keepAliveTime; this.maximumPoolSize=maximumPoolSize; this.nameServerAdd=nameServerAdd; this.producerGroupName=producerGroupName; this.transactionListener=transactionListener; &#125; public void init() throws Exception&#123; logger.info(\"开始启动消息生产者服务。。。\"); producer = new TransactionMQProducer(producerGroupName); producer.setNamesrvAddr(nameServerAdd); ExecutorService executorService = new ThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime, TimeUnit.SECONDS,new ArrayBlockingQueue&lt;&gt;(2000),(Runnable r )-&gt;&#123; Thread thread = new Thread(r); thread.setName(\"client-transaction-msg-check-thread\"); return thread; &#125;); producer.setExecutorService(executorService); producer.setTransactionListener(transactionListener); producer.start(); logger.info(\"消息生产者已启动！！！\"); &#125; public void destory()&#123; logger.info(\"开始关闭消息生产服务。。\"); producer.shutdown(); logger.info(\"生产者服务已关闭\"); &#125; public DefaultMQProducer getProducer()&#123; return producer; &#125;&#125; 消费者 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * @Auther: Yonggang Shi * @Date: 2020/02/04 18:41 * @Description: 消费者 */public class TransactionSpringConsumer &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); private String consumerGropuName; private String nameServerAddr; private String topicName; private DefaultMQPushConsumer consumer; private MessageListenerConcurrently messageListener; public TransactionSpringConsumer(String consumerGropuName,String nameServerAddr,String topicName,MessageListenerConcurrently messageListener)&#123; this.consumerGropuName=consumerGropuName; this.messageListener=messageListener; this.nameServerAddr=nameServerAddr; this.topicName=topicName; &#125; public void init () throws Exception&#123; logger.info(\"开始启动消息消费者服务。。。\"); consumer=new DefaultMQPushConsumer(consumerGropuName); consumer.setNamesrvAddr(nameServerAddr); consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET); consumer.subscribe(topicName,\"*\"); consumer.registerMessageListener(messageListener); consumer.start(); logger.info(\"消息消费者服务启动成功\"); &#125; public void destory()&#123; logger.info(\"开始关闭消息消费者服务。。\"); consumer.shutdown(); logger.info(\"消费者服务已关闭\"); &#125; public DefaultMQPushConsumer getConsumer()&#123; return consumer; &#125;&#125; 生产者、消费者配置类 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * @Auther: Yonggang Shi * @Date: 2020/02/04 18:41 * @Description: 消费者 */public class TransactionSpringConsumer &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); private String consumerGropuName; private String nameServerAddr; private String topicName; private DefaultMQPushConsumer consumer; private MessageListenerConcurrently messageListener; public TransactionSpringConsumer(String consumerGropuName,String nameServerAddr,String topicName,MessageListenerConcurrently messageListener)&#123; this.consumerGropuName=consumerGropuName; this.messageListener=messageListener; this.nameServerAddr=nameServerAddr; this.topicName=topicName; &#125; public void init () throws Exception&#123; logger.info(\"开始启动消息消费者服务。。。\"); consumer=new DefaultMQPushConsumer(consumerGropuName); consumer.setNamesrvAddr(nameServerAddr); consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET); consumer.subscribe(topicName,\"*\"); consumer.registerMessageListener(messageListener); consumer.start(); logger.info(\"消息消费者服务启动成功\"); &#125; public void destory()&#123; logger.info(\"开始关闭消息消费者服务。。\"); consumer.shutdown(); logger.info(\"消费者服务已关闭\"); &#125; public DefaultMQPushConsumer getConsumer()&#123; return consumer; &#125;&#125; 这样就已经完成了分布式事务生产消费的工作，还有相关的service和dao代码就不贴了，这里 都有！ 单元测试分布式事务生产消费 1234567891011121314151617181920/** * @Auther: Yonggang Shi * @Date: 2020/02/04 23:24 * @Description: */@RunWith(SpringRunner.class)@SpringBootTest(classes = &#123;RocketmqApplication.class&#125;)public class MQConfigTest &#123; @Autowired private UserService userService; @Test public void newUser() throws Exception&#123; userService.newUserAndPoint(\"分布式事务测试\",100); Thread.sleep(5000); &#125;&#125; 结果如下 1580921850968 我们再 看下两个库是否也更新了 1580922010823 至此分布式事务已完成实现","categories":[{"name":"MQ","slug":"MQ","permalink":"http://blog.loveyx815.cn/categories/MQ/"}],"tags":[{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"},{"name":"MQ","slug":"MQ","permalink":"http://blog.loveyx815.cn/tags/MQ/"},{"name":"分布式","slug":"分布式","permalink":"http://blog.loveyx815.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-08T04:03:59.130Z","updated":"2020-04-08T02:27:31.553Z","comments":true,"path":"2020/04/08/hello-world/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"test my blog","slug":"南京SQL优化实战","date":"2020-04-06T16:00:00.000Z","updated":"2020-04-08T03:25:23.627Z","comments":true,"path":"2020/04/07/南京SQL优化实战/","link":"","permalink":"http://blog.loveyx815.cn/2020/04/07/%E5%8D%97%E4%BA%ACSQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/","excerpt":"","text":"[TOC] 一、理论部分 abase执行SQL语句时，首先通过语法分析模块（词法分析、语法分析(语法树)、语义分析（查询树）），然后通过查询优化器进行逻辑优化和物理优化，生成计划树，就是执行计划。 逻辑优化: 是基于规则的优化，对SQL进行重写。比如谓词下推，连接顺序交换等。 物理优化：是基于代价的优化，数据库建立了各种代价模型，对各种物理路径进行代价的评估，选择一条代价相对较低的执行。物理路径包括扫描路径、连接路径等。 代价计算: 代价的计算需要用到统计信息和选择率。统计信息记录了表内数据的抽样信息，定期进行统计。根据统计信息，数据库可以计算出一个约束条件可以过滤掉多少数据，计算出选择率。根据选择率可以得到各种物理路径的代价。 连接路径: 嵌套循环连接、哈希连接、归并连接。 二、执行计划查看命令语法 explain[(option[,…])]explain [analyze][verbose]statement可选的option选项有： analyze[boolean]：得到statement的真实运行时间。默认是false verbose[boolean]：得到statement语句的执行计划和执行计划中的每个节点的详细信息。默认为false costs[boolean]：得到计划中每个接地哪的cost，rows，width的估算值，默认为true buffers[boolean]：analyze出现时可选。缓存的使用情况共享缓存(shared blocks)的hit，read，dirtied，written数值本地缓存(local blocks)的hit，read，dirtied,written数值临时快(temp blocks)的read,written数值 timing[boolean]：analyze出现时可选。显示每个节点的启动时间和总时间花费。默认true format{text|xml|json|yaml}：指定执行计划的输出格式text：默认值。以行为单位，显示每个结点的计划信息，以缩进格式表示子节点的计划信息。buffers参数时的文本格式，只输出非零值xml：xml格式json：json格式yaml：以yaml格式显示执行计划 常用组合 一般查询explain analyze select … ; 查询缓存及详细信息explain (analyze,verbose,buffers) select … ; 针对更新插入删除的执行计划查询begin;explain analyze insert/update/delete … ;rollback; 三、具体优化案例3.1查询计划解读关键字 cost:重要的指标。cost=0.00..16.11有两个部分，启动时间=0.00 和总时间=16.11。单位是毫秒。这个指标也只是预测值。启动时间也有解释为找到符合条件的第一行所花的时间。 rows:返回的行数，如果执行vacuum和analyze那么返回的结果更加接近实际值 width:查询结果所有字段的总宽度，并非关键指标。 actual time：实际花费的时间。 loops：循环的次数 buffers：缓冲命中数 output： 输出的字段名 planning time: 生成执行计划时间 execution time：执行执行计划时间 阅读顺序 嵌套层次最深的，最先执行 同样嵌套深度的，从上到下，先予执行 每一步的cost包括上一步 节点 Seq Scan: 表扫描 Index Scan：索引扫描(读取索引块，然后读取数据文件) Index Only Scan：索引只读扫描(只读取索引文件，根据映射文件获取数据) Nested [(type)] Loop：嵌套循环连接。type可能是Inner，left，right，full，semi，anti。inner的可以显示省略 Merge[(type)] Join 归并连接。type同上 Hash[(type)] Join：哈希连接。type同上 3.2现场具体SQL查看3.2.1第一个SQL，砍掉所有无用部分set PGPASSWORD=tusc@6789#JKLE:\\thunisoft\\arterybase\\3.6\\bin\\psql -Usa -h172.23.21.124 -p6543 -dzfxt_zf 12345678910111213explain analyze WITH xgr AS ( SELECT xyr.c_id_ajxx, string_agg((xyr.c_xyrxm), &#39;,&#39;) AS xyr FROM db_yw.t_jc_gaxyr xyr INNER JOIN (SELECT DISTINCT c_ajid FROM db_yw.t_sacw_cwjbxx_copy) jb ON jb.c_ajid &#x3D; xyr.c_id_ajxx GROUP BY xyr.c_id_ajxx) SELECT count(*) FROM (SELECT aj.c_id C_AJID, MAX(aj.c_ajmc) C_AJMC, MAX(aj.c_ajbh) c_ajbh, MAX(xgr.xyr) C_XGR, MAX(aj.d_lasj) D_LARQ, MAX(fbxx.c_sydw) C_YSDW FROM db_yw.t_sacw_cwjbxx_copy jbxx INNER JOIN db_yw.t_jc_gaaj aj ON jbxx.c_ajid &#x3D; aj.c_id INNER JOIN db_yw.t_sacw_cwfbxx_copy fbxx ON jbxx.c_id&#x3D;fbxx.c_cwxx_id LEFT JOIN xgr ON jbxx.c_ajid &#x3D; xgr.c_id_ajxx WHERE fbxx.c_ysdw IN (SELECT getdept(&#39;0001ZZ10000000009UAL&#39;)) AND c_cwzt NOT IN (&#39;1&#39;, &#39;9&#39;) GROUP BY aj.c_id) table_count 问题 缺少外键索引 with 中的t_sacw_cwjbxx_copy不需要关联 没必要用with语句 求count(*)并且案件表left join xgr的子查询，因此数量没有变化。没必要连接。 对aj.c_id分组求max后取count(*),相当于对aj.c_id去重后求总数 t_sacw_cwjbxx_copy 仅为了传递连接，可以在t_sacw_cwfbxx_copy中冗余案件主表编号 现场数据库经历长时间更新删除等未及时进行VACUUM清理无效数据。引起表放大的问题。 列表查询求总数的SQL一定不要直接用查列表SQL套一个count(*) 修改后SQL 12345explain analyzeselect count(distinct aj.c_id) from db_yw.t_sacw_cwfbxx_copy fbxxJOIN db_yw.t_jc_gaaj aj ON fbxx.c_ajid &#x3D; aj.c_id WHERE fbxx.c_ysdw IN (SELECT getdept(&#39;0001ZZ10000000009UAL&#39;)) AND c_cwzt NOT IN (&#39;1&#39;, &#39;9&#39;) ; 3.2.2 前一个SQL对应的列表查询,提前缩小结果集大小案件列表查询，建议先查出符合条件的案件，然后再拼接xyr信息。 12345select aj.c_id C_AJID, MAX(aj.c_ajmc) C_AJMC, MAX(aj.c_ajbh) c_ajbh, MAX(aj.d_lasj) D_LARQ, MAX(fbxx.c_sydw) C_YSDW from db_yw.t_sacw_cwfbxx_copy fbxxJOIN db_yw.t_jc_gaaj aj ON fbxx.c_ajid &#x3D; aj.c_id WHERE fbxx.c_ysdw IN (SELECT getdept(&#39;0001ZZ10000000009UAL&#39;)) AND c_cwzt NOT IN (&#39;1&#39;, &#39;9&#39;) group by aj.c_id limit 20 一步从数据库获取包括嫌疑人的案件列表。提前通过限制条件及limit减小结果集大小，然后再关联xyr表进行分组拼接xyrxm。 123456789with aaj as (select aj.c_id C_AJID, MAX(aj.c_ajmc) C_AJMC, MAX(aj.c_ajbh) c_ajbh, MAX(aj.d_lasj) D_LARQ, MAX(fbxx.c_sydw) C_YSDW from db_yw.t_sacw_cwfbxx_copy fbxxJOIN db_yw.t_jc_gaaj aj ON fbxx.c_ajid &#x3D; aj.c_id WHERE fbxx.c_ysdw IN (SELECT getdept(&#39;0001ZZ10000000009UAL&#39;)) AND c_cwzt NOT IN (&#39;1&#39;, &#39;9&#39;) group by aj.c_id limit 20 )select aaj.C_AJID,max(aaj.C_AJMC),max(aaj.c_ajbh),max(aaj.D_LARQ),max(aaj.C_YSDW),string_agg((xyr.c_xyrxm), &#39;,&#39;) AS xyrxm from aaj join db_yw.t_jc_gaxyr xyr on aaj.C_AJID &#x3D; xyr.c_id_ajxxgroup by aaj.C_AJID 3.2.3体会一下pg对not exists的逻辑优化E:\\thunisoft\\arterybase\\3.6\\bin\\psql -Usa -h172.23.18.110 -p6543 -ddb_hjgl 1234567891011121314151617select * from ( select &#39;xk&#39; as type, s.c_ajmc as ajmc, s.c_bar as bar, r.c_xm as bkr, r.c_id as bkrid, &#39;实施边控&#39; cslxmc, s.c_id as id, to_char(s.dt_bkkhrq, &#39;yyyy-mm-dd&#39;) as skrq, s.c_bkbbbh as ykbbbh, to_char(s.dt_bkzkrq, &#39;yyyy-mm-dd&#39;) as zkrq from db_hjgl.t_ry r join db_hjgl.t_sq s on s.c_id &#x3D; r.c_sqid where (not exists(select 1 from db_hjgl.t_ykry y where r.c_id &#x3D; y.c_yryid) and not exists(select 1 from db_hjgl.t_ckry c where c.c_xkryid &#x3D; r.c_id and n_sfcxbk &#x3D; 1)) and s.dt_bkzkrq &gt; now() and s.n_sqzt &#x3D; 7 union select &#39;yk&#39; as type, s.c_ajmc as ajmc, s.c_bar as bar, r.c_xm as bkr, r.c_id as bkrid, &#39;延长边控&#39; cslxmc, s.c_id as id, to_char(s.dt_bkkhrq, &#39;yyyy-mm-dd&#39;) as skrq, s.c_bkbbbh as ykbbbh, to_char(s.dt_bkzkrq, &#39;yyyy-mm-dd&#39;) as zkrq from db_hjgl.t_ykry r join db_hjgl.t_sq s on s.c_id &#x3D; r.c_sqid where not exists(select 1 from db_hjgl.t_ckry c where c.c_ykryid &#x3D; r.c_id and n_sfcxbk &#x3D; 1) and not exists(select 1 from db_hjgl.t_ykry y where y.c_yryid &#x3D; r.c_id) and s.dt_bkzkrq &gt; now() and s.n_sqzt &#x3D; 7 )t WHERE 1 &#x3D; 1 order by t.skrq limit &#39;10&#39;::int offset (&#39;1&#39;::int - 1) * &#39;10&#39;::int 执行计划 123456789101112131415161718192021Nested Loop Anti Join (cost&#x3D;12.16..29.83 rows&#x3D;11 width&#x3D;232) (actual time&#x3D;0.172..0.250 rows&#x3D;15 loops&#x3D;1) Join Filter: (r.c_id &#x3D; (c.c_xkryid)::bpchar) Rows Removed by Join Filter: 15 -&gt; Hash Anti Join (cost&#x3D;12.16..18.23 rows&#x3D;11 width&#x3D;120) (actual time&#x3D;0.155..0.217 rows&#x3D;15 loops&#x3D;1) Hash Cond: (r.c_id &#x3D; y.c_yryid) -&gt; Hash Join (cost&#x3D;10.83..16.75 rows&#x3D;12 width&#x3D;120) (actual time&#x3D;0.125..0.182 rows&#x3D;24 loops&#x3D;1) Hash Cond: ((r.c_sqid)::bpchar &#x3D; s.c_id) -&gt; Seq Scan on t_ry r (cost&#x3D;0.00..5.31 rows&#x3D;131 width&#x3D;72) (actual time&#x3D;0.008..0.027 rows&#x3D;142 loops&#x3D;1) -&gt; Hash (cost&#x3D;10.59..10.59 rows&#x3D;19 width&#x3D;81) (actual time&#x3D;0.108..0.108 rows&#x3D;24 loops&#x3D;1) Buckets: 1024 Batches: 1 Memory Usage: 11kB -&gt; Seq Scan on t_sq s (cost&#x3D;0.00..10.59 rows&#x3D;19 width&#x3D;81) (actual time&#x3D;0.007..0.099 rows&#x3D;24 loops&#x3D;1) Filter: ((n_sqzt &#x3D; 7) AND (dt_bkzkrq &gt; now())) Rows Removed by Filter: 197 -&gt; Hash (cost&#x3D;1.15..1.15 rows&#x3D;15 width&#x3D;33) (actual time&#x3D;0.025..0.025 rows&#x3D;15 loops&#x3D;1) Buckets: 1024 Batches: 1 Memory Usage: 9kB -&gt; Seq Scan on t_ykry y (cost&#x3D;0.00..1.15 rows&#x3D;15 width&#x3D;33) (actual time&#x3D;0.004..0.022 rows&#x3D;15 loops&#x3D;1) -&gt; Materialize (cost&#x3D;0.00..11.38 rows&#x3D;1 width&#x3D;82) (actual time&#x3D;0.000..0.000 rows&#x3D;1 loops&#x3D;15) -&gt; Seq Scan on t_ckry c (cost&#x3D;0.00..11.38 rows&#x3D;1 width&#x3D;82) (actual time&#x3D;0.004..0.004 rows&#x3D;1 loops&#x3D;1) Filter: (n_sfcxbk &#x3D; 1)Planning time: 0.409 msExecution time: 0.324 ms join示意图 等价SQL 123456select &#39;xk&#39; as type, s.c_ajmc as ajmc, s.c_bar as bar, r.c_xm as bkr, r.c_id as bkrid, &#39;实施边控&#39; cslxmc, s.c_id as id, to_char(s.dt_bkkhrq, &#39;yyyy-mm-dd&#39;) as skrq, s.c_bkbbbh as ykbbbh, to_char(s.dt_bkzkrq, &#39;yyyy-mm-dd&#39;) as zkrq from db_hjgl.t_ry r join db_hjgl.t_sq s on s.c_id &#x3D; r.c_sqid left join db_hjgl.t_ykry y on r.c_id&#x3D;y.c_yryid left join db_hjgl.t_ckry c on r.c_id&#x3D;c.c_xkryid and c.n_sfcxbk&#x3D;1where y.c_yryid is null and c.c_xkryid is null and s.dt_bkzkrq &gt; now() and s.n_sqzt &#x3D; 7 3.3.4 其它部门的SQL1，利用with减少表扫描次数12345678910111213141516171819202122232425SELECT COUNT (DISTINCT(xfj.petition_no)) FROM ods_jzw.petition_basic_info xfj RIGHT JOIN ods_jzw.petition_deal_info deal ON xfj.oid &#x3D; deal.petition_basic_info_oid left join ods_jzw.t_xf_code as code on xfj.region_code &#x3D; code.c_code and code.c_pid &#x3D; &#39;XZQH&#39; WHERE deal.create_date&gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) AND deal.create_date&lt;to_timestamp(&#39;2019-04&#39;, &#39;yyyy-MM&#39;)UNION ALLSELECT COUNT (DISTINCT(xfj.petition_no)) FROM ods_jzw.petition_basic_info xfj RIGHT JOIN ods_jzw.petition_deal_info deal ON xfj.oid &#x3D; deal.petition_basic_info_oid left join ods_jzw.t_xf_code as code on xfj.region_code &#x3D; code.c_code and code.c_pid &#x3D; &#39;XZQH&#39; WHERE xfj.petition_class_code &#x3D; &#39;1&#39; AND deal.create_date&gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) AND deal.create_date&lt; to_timestamp(&#39;2019-04&#39;, &#39;yyyy-MM&#39;)UNION ALLSELECT COUNT (DISTINCT(xfj.petition_no)) FROM ods_jzw.petition_basic_info xfj RIGHT JOIN ods_jzw.petition_deal_info deal ON xfj.oid &#x3D; deal.petition_basic_info_oid left join ods_jzw.t_xf_code as code on xfj.region_code &#x3D; code.c_code and code.c_pid &#x3D; &#39;XZQH&#39; WHERE xfj.petition_class_code &#x3D; &#39;1&#39; AND xfj.repeat_flag !&#x3D; &#39;1&#39; AND deal.create_date&gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) AND deal.create_date&lt; to_timestamp(&#39;2019-04&#39;, &#39;yyyy-MM&#39;) 改写后SQL，速度提高1倍以上 1234567891011121314151617with xfj as ( select xfj.petition_no,xfj.petition_class_code,xfj.repeat_flag from ods_jzw.petition_basic_info xfj RIGHT JOIN ods_jzw.petition_deal_info dealON xfj.oid &#x3D; deal.petition_basic_info_oidleft join ods_jzw.t_xf_code as code on xfj.region_code &#x3D; code.c_code and code.c_pid &#x3D; &#39;XZQH&#39; WHERE deal.create_date&gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) AND deal.create_date&lt;to_timestamp(&#39;2019-04&#39;, &#39;yyyy-MM&#39;))SELECT COUNT (distinct xfj.petition_no) FROM xfjUNION ALLSELECT COUNT (DISTINCT(xfj.petition_no)) FROM xfj WHERE xfj.petition_class_code &#x3D; &#39;1&#39; UNION ALLSELECT COUNT (DISTINCT(xfj.petition_no)) FROM xfj WHERE xfj.petition_class_code &#x3D; &#39;1&#39; AND xfj.repeat_flag !&#x3D; &#39;1&#39; 3.3.5 其它部门的SQL1，超级长SQL123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as ddjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbjunion all SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as ddjlsl FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code, 1, 4) in(&#39;0121&#39;,&#39;0122&#39;,&#39;0124&#39;,&#39;0123&#39;,&#39;0125&#39;,&#39;0126&#39;)) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code, 1, 4) in(&#39;0121&#39;,&#39;0122&#39;,&#39;0124&#39;,&#39;0123&#39;,&#39;0125&#39;,&#39;0126&#39;)) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code, 1, 4) in(&#39;0121&#39;,&#39;0122&#39;,&#39;0124&#39;,&#39;0123&#39;,&#39;0125&#39;,&#39;0126&#39;)) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code, 1, 4) in(&#39;0121&#39;,&#39;0122&#39;,&#39;0124&#39;,&#39;0123&#39;,&#39;0125&#39;,&#39;0126&#39;)) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtslunion all SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as zzjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;501&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;501&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;501&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;501&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbjunion all SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as zzjlsl FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0121&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0121&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0121&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0121&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtslunion all SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as zjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;565&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;565&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;565&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;565&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbjunion all SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as zjlsl FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0122&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0122&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0122&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0122&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtslunion all SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as ljjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;610&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;610&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;610&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;610&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbjunion all SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as ljjlsl FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0123&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0123&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0123&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0123&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtslunion all SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as qzjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;672&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;672&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;672&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;672&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbjunion all SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as qzjlsl FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0124&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0124&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0124&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0124&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtslunion all SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as gzjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;692&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;692&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;692&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;692&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbjunion all SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as gzjlsl FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0125&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0125&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0125&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0125&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtslunion all SELECT thhxbj.bj1 + cbhsbj.bj2 + ajslbj.bj3 + qtbj.bj4 as shjlbj FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj1 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;725&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND thhx.bh &#x3D; wjwf.c_ajbh AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj2 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;725&#39; ) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND cbhs.bh &#x3D; wjwf.c_ajbh AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhsbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj3 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;725&#39; ) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE ajsl.bh &#x3D; wjwf.c_ajbh AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslbj, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as bj4 FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;1&#39; and c_fltl &#x3D;&#39;jlcf2018&#39; and c_wjyjfl &#x3D; &#39;725&#39; ) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.c_ajbh &#x3D; wtxs.c_bh )as qtbjunion all SELECT thhxsl.sl1 + cbhssl.sl2 + ajslsl.sl3 + qtsl.sl4 as shjlsl FROM (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl1 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0126&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_thhx_jl WHERE c_clfs in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;))as thhxjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_thhx WHERE d_jsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as thhx WHERE thhx.bh &#x3D; thhxjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND thhx.c_ajbs &#x3D; wtxs.c_ajbs )as thhxsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl2 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0126&#39;) as wjwf, (SELECT DISTINCT(c_ajbh)as ajbh FROM ods_zhba.t_zhba_cbhs_cbhsqk WHERE c_clfs in (&#39;1&#39;,&#39;3&#39;,&#39;4&#39;))as cbhsjl, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_cbhs WHERE d_chjsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_chjsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as cbhs, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs WHERE cbhs.bh &#x3D; cbhsjl.ajbh AND wtxs.c_xfbh &#x3D; wjwf.petition_no AND cbhs.c_ajbs &#x3D; wtxs.c_ajbs )as cbhssl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl3 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0126&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh as bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_sljsrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_sljsrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;))as ajsl WHERE wtxs.c_xfbh &#x3D; wjwf.petition_no AND ajsl.c_ajbs &#x3D; wtxs.c_ajbs )as ajslsl, (SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as sl4 FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0126&#39;) as wjwf, (SELECT c_bh,c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39; and c_pchhczfs in(&#39;5&#39;,&#39;27&#39;,&#39;32&#39;) AND d_flrq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_flrq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as wtxs WHERE wjwf.petition_no &#x3D; wtxs.c_xfbh )as qtslunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as fzbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbhunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as fzsl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4) in(&#39;0141&#39;,&#39;0148&#39;,&#39;0144&#39;,&#39;0145&#39;,&#39;0146&#39;,&#39;0147&#39;)) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_nounion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as twhlbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;1&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;) ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbhunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as twhlsl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0141&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_nounion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as lyzqbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;19&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;) ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbhunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as lyzqsl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0148&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_nounion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as whzsbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;35&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;) ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbhunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as whzssl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0144&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_nounion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as xswbbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;47&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;) ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbhunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as xswbsl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0145&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_nounion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as zrsgbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;63&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;) ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbhunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as zrsgsl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0146&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_nounion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as fzqtbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl &#x3D; &#39;xf&#39; and c_wjyjfl &#x3D; &#39;75&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;) ) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbhunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as fzqtsl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4)&#x3D;&#39;0147&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt;to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_nounion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as qtbj FROM (SELECT c_ajbh FROM ods_zhba.t_zhba_wjwf WHERE c_lx &#x3D; &#39;2&#39; and c_fltl in (&#39;gwyf&#39;,&#39;fgf&#39;,&#39;jcgf&#39;,&#39;byzcf&#39;)) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_bh,c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND ajsl.c_bh &#x3D; wjwf.c_ajbhunion all SELECT COALESCE(COUNT(DISTINCT(wtxs.c_xfbh)),0) as qtsl FROM (SELECT petition_no FROM ods_jzw.issue_type_info WHERE substr(issue_type_code,1,4) &#x3D;&#39;0151&#39;) as wjwf, (SELECT c_xfbh,c_ajbs FROM ods_zhba.t_zhba_wtxs WHERE c_xfly &#x3D; &#39;1&#39;) as wtxs, (SELECT c_ajbs FROM ods_zhba.t_zhba_ajsl WHERE d_jarq &gt;&#x3D; to_timestamp(&#39;2018-04&#39;, &#39;yyyy-MM&#39;) and d_jarq &lt; to_timestamp(&#39;2019-03&#39;, &#39;yyyy-MM&#39;)) as ajsl WHERE ajsl.c_ajbs &#x3D; wtxs.c_ajbs AND wtxs.c_xfbh &#x3D; wjwf.petition_no 解决方法创建表达式索引 1create index i_issue_type_info_code14 on ods_jzw.issue_type_info(substr(issue_type_code, 1, 4)) 四、总结4.1索引部分影响使用索引的因素 能否走索引，是操作符是否被对应的索引访问方法支持来决定的。 是否用索引是优化器决定的，如果走索引的成本低，可以走索引。或者使用了开关，禁止全表扫(大幅度增加全表扫描的代价，并不是真的禁用)，也可以走索引。 常见不走索引的情况 数据类型不匹配 where子句进行表达式或函数操作 like的全模糊匹配(btree) 数据占比 长时间未进行表分析(vacuum analyze)，统计信息不准确 强调一下公司规范 所有逻辑外键需创建索引 多级子表应该包含所有上级表的主键 （如主表&lt;-子表关系：A&lt;-B&lt;-C，C要有B、A的逻辑外键，以此类推） 表连接join条件用到的字段必须类型相同，避免隐式转换造成索引失效 书写规范禁用select * 4.2 其他对性能的影响，设计〉SQL优化〉参数优化，设计阶段就要考虑性能。减少查询联表的数量，简单的使用数据库。SQL优化意识比技术更重要。","categories":[],"tags":[{"name":"SQL优化","slug":"SQL优化","permalink":"http://blog.loveyx815.cn/tags/SQL%E4%BC%98%E5%8C%96/"}]}],"categories":[{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"},{"name":"JVM","slug":"Java开发总结/JVM","permalink":"http://blog.loveyx815.cn/categories/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/JVM/"},{"name":"MQ","slug":"MQ","permalink":"http://blog.loveyx815.cn/categories/MQ/"},{"name":"设计模式","slug":"设计模式","permalink":"http://blog.loveyx815.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://blog.loveyx815.cn/tags/JVM/"},{"name":"Java开发总结","slug":"Java开发总结","permalink":"http://blog.loveyx815.cn/tags/Java%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"},{"name":"异常处理","slug":"异常处理","permalink":"http://blog.loveyx815.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"},{"name":"快捷键","slug":"快捷键","permalink":"http://blog.loveyx815.cn/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"常用命令","slug":"常用命令","permalink":"http://blog.loveyx815.cn/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"name":"MQ","slug":"MQ","permalink":"http://blog.loveyx815.cn/tags/MQ/"},{"name":"分布式","slug":"分布式","permalink":"http://blog.loveyx815.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"设计模式","slug":"设计模式","permalink":"http://blog.loveyx815.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"SQL优化","slug":"SQL优化","permalink":"http://blog.loveyx815.cn/tags/SQL%E4%BC%98%E5%8C%96/"}]}